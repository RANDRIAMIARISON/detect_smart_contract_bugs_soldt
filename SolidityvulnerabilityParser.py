# Generated from Solidityvulnerability.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0087")
        buf.write("\u03e2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\3\2\3\2\3\2\3\2\7\2\u00b5\n\2\f\2\16\2\u00b8")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\5\3\u00c1\n\3\3\3\3")
        buf.write("\3\3\3\5\3\u00c6\n\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3")
        buf.write("\6\3\7\3\7\5\7\u00d3\n\7\3\b\3\b\5\b\u00d7\n\b\3\t\3\t")
        buf.write("\3\n\5\n\u00dc\n\n\3\n\3\n\3\13\3\13\3\13\5\13\u00e3\n")
        buf.write("\13\3\f\3\f\3\f\3\f\5\f\u00e9\n\f\3\f\3\f\3\f\3\f\5\f")
        buf.write("\u00ef\n\f\3\f\3\f\5\f\u00f3\n\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\7\f\u00fd\n\f\f\f\16\f\u0100\13\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\5\f\u0107\n\f\3\r\3\r\3\16\5\16\u010c\n\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u0114\n\16\f\16\16")
        buf.write("\16\u0117\13\16\5\16\u0119\n\16\3\16\3\16\7\16\u011d\n")
        buf.write("\16\f\16\16\16\u0120\13\16\3\16\3\16\3\17\3\17\3\17\5")
        buf.write("\17\u0127\n\17\3\17\5\17\u012a\n\17\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\5\20\u0134\n\20\3\21\3\21\7\21\u0138")
        buf.write("\n\21\f\21\16\21\u013b\13\21\3\21\3\21\3\21\5\21\u0140")
        buf.write("\n\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\5\22\u0149\n")
        buf.write("\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\7\23\u0155\n\23\f\23\16\23\u0158\13\23\5\23\u015a\n\23")
        buf.write("\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\5\25")
        buf.write("\u0166\n\25\3\25\3\25\3\26\3\26\3\26\5\26\u016d\n\26\3")
        buf.write("\26\5\26\u0170\n\26\3\27\5\27\u0173\n\27\3\27\3\27\5\27")
        buf.write("\u0177\n\27\3\27\3\27\3\27\5\27\u017c\n\27\3\27\3\27\5")
        buf.write("\27\u0180\n\27\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\7\31\u018b\n\31\f\31\16\31\u018e\13\31\3\32\5\32")
        buf.write("\u0191\n\32\3\32\3\32\3\32\3\32\5\32\u0197\n\32\3\32\3")
        buf.write("\32\3\33\3\33\3\34\3\34\3\34\3\34\5\34\u01a1\n\34\3\34")
        buf.write("\3\34\7\34\u01a5\n\34\f\34\16\34\u01a8\13\34\3\34\3\34")
        buf.write("\3\35\3\35\3\35\3\35\7\35\u01b0\n\35\f\35\16\35\u01b3")
        buf.write("\13\35\5\35\u01b5\n\35\3\35\3\35\3\36\3\36\5\36\u01bb")
        buf.write("\n\36\3\36\5\36\u01be\n\36\3\37\3\37\3\37\3\37\7\37\u01c4")
        buf.write("\n\37\f\37\16\37\u01c7\13\37\5\37\u01c9\n\37\3\37\3\37")
        buf.write("\3 \3 \5 \u01cf\n \3 \5 \u01d2\n \3!\3!\3!\3!\7!\u01d8")
        buf.write("\n!\f!\16!\u01db\13!\5!\u01dd\n!\3!\3!\3\"\3\"\5\"\u01e3")
        buf.write("\n\"\3#\3#\5#\u01e7\n#\3#\3#\3$\3$\3$\3$\3$\3$\3$\5$\u01f2")
        buf.write("\n$\3$\3$\3$\5$\u01f7\n$\3$\7$\u01fa\n$\f$\16$\u01fd\13")
        buf.write("$\3%\3%\3%\7%\u0202\n%\f%\16%\u0205\13%\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3\'\3\'\3\'\3\'\3\'\7\'\u0213\n\'\f\'\16\'\u0216")
        buf.write("\13\'\3\'\3\'\5\'\u021a\n\'\3(\3(\3)\3)\3*\3*\7*\u0222")
        buf.write("\n*\f*\16*\u0225\13*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+")
        buf.write("\3+\3+\3+\5+\u0235\n+\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\5")
        buf.write("-\u0241\n-\3.\3.\3.\3.\3.\3.\3/\3/\5/\u024b\n/\3\60\3")
        buf.write("\60\3\60\3\60\5\60\u0251\n\60\3\60\3\60\5\60\u0255\n\60")
        buf.write("\3\60\5\60\u0258\n\60\3\60\3\60\3\60\3\61\3\61\5\61\u025f")
        buf.write("\n\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\63\3\63\3\63\3\64\3\64\3\64\3\65\3\65\5\65\u0273\n")
        buf.write("\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67\3\67\38\3")
        buf.write("8\38\38\38\38\38\58\u0285\n8\38\38\58\u0289\n8\38\38\3")
        buf.write("9\59\u028e\n9\39\39\59\u0292\n9\79\u0294\n9\f9\169\u0297")
        buf.write("\139\3:\3:\5:\u029b\n:\3:\7:\u029e\n:\f:\16:\u02a1\13")
        buf.write(":\3:\5:\u02a4\n:\3:\3:\3;\3;\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u02bc\n<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\7<\u02f7")
        buf.write("\n<\f<\16<\u02fa\13<\3=\3=\3=\3=\3=\3=\3=\5=\u0303\n=")
        buf.write("\3=\3=\3=\3=\3=\5=\u030a\n=\5=\u030c\n=\3>\3>\3>\7>\u0311")
        buf.write("\n>\f>\16>\u0314\13>\3?\3?\3?\7?\u0319\n?\f?\16?\u031c")
        buf.write("\13?\3?\5?\u031f\n?\3@\3@\3@\3@\3A\3A\5A\u0327\nA\3A\3")
        buf.write("A\5A\u032b\nA\5A\u032d\nA\3B\3B\3B\3B\3B\3C\3C\7C\u0336")
        buf.write("\nC\fC\16C\u0339\13C\3C\3C\3D\3D\3D\3D\3D\3D\3D\3D\3D")
        buf.write("\3D\3D\3D\3D\3D\3D\3D\3D\5D\u034e\nD\3E\3E\5E\u0352\n")
        buf.write("E\3F\3F\3F\3F\5F\u0358\nF\3F\3F\5F\u035c\nF\3F\3F\7F\u0360")
        buf.write("\nF\fF\16F\u0363\13F\3F\5F\u0366\nF\3G\3G\3G\3G\5G\u036c")
        buf.write("\nG\3H\3H\3H\3H\3I\3I\3I\3I\3I\5I\u0377\nI\3J\3J\3J\7")
        buf.write("J\u037c\nJ\fJ\16J\u037f\13J\3K\3K\3K\3L\3L\3L\3M\3M\3")
        buf.write("M\7M\u038a\nM\fM\16M\u038d\13M\3N\3N\3N\3N\3N\3N\5N\u0395")
        buf.write("\nN\3O\3O\3O\3O\5O\u039b\nO\3O\3O\5O\u039f\nO\3O\3O\3")
        buf.write("P\3P\3P\3Q\3Q\3Q\5Q\u03a9\nQ\3Q\3Q\3Q\5Q\u03ae\nQ\3Q\3")
        buf.write("Q\3R\3R\3R\3R\3S\3S\3T\3T\3T\3T\3U\3U\5U\u03be\nU\3U\3")
        buf.write("U\5U\u03c2\nU\7U\u03c4\nU\fU\16U\u03c7\13U\3U\3U\3U\3")
        buf.write("U\3U\7U\u03ce\nU\fU\16U\u03d1\13U\5U\u03d3\nU\3U\5U\u03d6")
        buf.write("\nU\3V\3V\5V\u03da\nV\3W\3W\5W\u03de\nW\3X\3X\3X\2\4F")
        buf.write("vY\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60")
        buf.write("\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\2\26\3\2\6\7\3\2\t\16\3\2\21")
        buf.write("\27\3\2hi\3\2\37!\5\2xx||~\177\3\2\63\65\6\2xx}}\u0080")
        buf.write("\u0080\u0082\u0082\5\2\60\60>Ajn\3\2BC\4\2\b\bEE\3\2F")
        buf.write("G\4\2\32\32JK\3\2LM\3\2\23\26\3\2PQ\4\2\27\27V_\5\2qr")
        buf.write("tt\u0084\u0084\3\2qr\5\2\33\33\65\65\u0083\u0083\2\u0441")
        buf.write("\2\u00b6\3\2\2\2\4\u00c5\3\2\2\2\6\u00c7\3\2\2\2\b\u00c9")
        buf.write("\3\2\2\2\n\u00ce\3\2\2\2\f\u00d2\3\2\2\2\16\u00d4\3\2")
        buf.write("\2\2\20\u00d8\3\2\2\2\22\u00db\3\2\2\2\24\u00df\3\2\2")
        buf.write("\2\26\u0106\3\2\2\2\30\u0108\3\2\2\2\32\u010b\3\2\2\2")
        buf.write("\34\u0123\3\2\2\2\36\u0133\3\2\2\2 \u0135\3\2\2\2\"\u0143")
        buf.write("\3\2\2\2$\u014c\3\2\2\2&\u015d\3\2\2\2(\u0162\3\2\2\2")
        buf.write("*\u0169\3\2\2\2,\u0172\3\2\2\2.\u0181\3\2\2\2\60\u018c")
        buf.write("\3\2\2\2\62\u0190\3\2\2\2\64\u019a\3\2\2\2\66\u019c\3")
        buf.write("\2\2\28\u01ab\3\2\2\2:\u01b8\3\2\2\2<\u01bf\3\2\2\2>\u01cc")
        buf.write("\3\2\2\2@\u01d3\3\2\2\2B\u01e0\3\2\2\2D\u01e4\3\2\2\2")
        buf.write("F\u01f1\3\2\2\2H\u01fe\3\2\2\2J\u0206\3\2\2\2L\u020d\3")
        buf.write("\2\2\2N\u021b\3\2\2\2P\u021d\3\2\2\2R\u021f\3\2\2\2T\u0234")
        buf.write("\3\2\2\2V\u0236\3\2\2\2X\u0239\3\2\2\2Z\u0242\3\2\2\2")
        buf.write("\\\u024a\3\2\2\2^\u024c\3\2\2\2`\u025c\3\2\2\2b\u0262")
        buf.write("\3\2\2\2d\u026a\3\2\2\2f\u026d\3\2\2\2h\u0270\3\2\2\2")
        buf.write("j\u0276\3\2\2\2l\u0279\3\2\2\2n\u0284\3\2\2\2p\u028d\3")
        buf.write("\2\2\2r\u0298\3\2\2\2t\u02a7\3\2\2\2v\u02bb\3\2\2\2x\u030b")
        buf.write("\3\2\2\2z\u030d\3\2\2\2|\u0315\3\2\2\2~\u0320\3\2\2\2")
        buf.write("\u0080\u032c\3\2\2\2\u0082\u032e\3\2\2\2\u0084\u0333\3")
        buf.write("\2\2\2\u0086\u034d\3\2\2\2\u0088\u0351\3\2\2\2\u008a\u0357")
        buf.write("\3\2\2\2\u008c\u0367\3\2\2\2\u008e\u036d\3\2\2\2\u0090")
        buf.write("\u0376\3\2\2\2\u0092\u0378\3\2\2\2\u0094\u0380\3\2\2\2")
        buf.write("\u0096\u0383\3\2\2\2\u0098\u0386\3\2\2\2\u009a\u0394\3")
        buf.write("\2\2\2\u009c\u0396\3\2\2\2\u009e\u03a2\3\2\2\2\u00a0\u03a5")
        buf.write("\3\2\2\2\u00a2\u03b1\3\2\2\2\u00a4\u03b5\3\2\2\2\u00a6")
        buf.write("\u03b7\3\2\2\2\u00a8\u03d5\3\2\2\2\u00aa\u03d9\3\2\2\2")
        buf.write("\u00ac\u03db\3\2\2\2\u00ae\u03df\3\2\2\2\u00b0\u00b5\5")
        buf.write("\4\3\2\u00b1\u00b5\5\b\5\2\u00b2\u00b5\5\26\f\2\u00b3")
        buf.write("\u00b5\5\32\16\2\u00b4\u00b0\3\2\2\2\u00b4\u00b1\3\2\2")
        buf.write("\2\u00b4\u00b2\3\2\2\2\u00b4\u00b3\3\2\2\2\u00b5\u00b8")
        buf.write("\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7")
        buf.write("\u00b9\3\2\2\2\u00b8\u00b6\3\2\2\2\u00b9\u00ba\7\2\2\3")
        buf.write("\u00ba\3\3\2\2\2\u00bb\u00c6\7\3\2\2\u00bc\u00c6\7\4\2")
        buf.write("\2\u00bd\u00c0\7\4\2\2\u00be\u00bf\7\5\2\2\u00bf\u00c1")
        buf.write("\t\2\2\2\u00c0\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1")
        buf.write("\u00c2\3\2\2\2\u00c2\u00c3\7\b\2\2\u00c3\u00c4\7g\2\2")
        buf.write("\u00c4\u00c6\5\6\4\2\u00c5\u00bb\3\2\2\2\u00c5\u00bc\3")
        buf.write("\2\2\2\u00c5\u00bd\3\2\2\2\u00c6\5\3\2\2\2\u00c7\u00c8")
        buf.write("\t\3\2\2\u00c8\7\3\2\2\2\u00c9\u00ca\7\17\2\2\u00ca\u00cb")
        buf.write("\5\n\6\2\u00cb\u00cc\5\f\7\2\u00cc\u00cd\7\20\2\2\u00cd")
        buf.write("\t\3\2\2\2\u00ce\u00cf\5\u00aeX\2\u00cf\13\3\2\2\2\u00d0")
        buf.write("\u00d3\5\16\b\2\u00d1\u00d3\5v<\2\u00d2\u00d0\3\2\2\2")
        buf.write("\u00d2\u00d1\3\2\2\2\u00d3\r\3\2\2\2\u00d4\u00d6\5\22")
        buf.write("\n\2\u00d5\u00d7\5\22\n\2\u00d6\u00d5\3\2\2\2\u00d6\u00d7")
        buf.write("\3\2\2\2\u00d7\17\3\2\2\2\u00d8\u00d9\t\4\2\2\u00d9\21")
        buf.write("\3\2\2\2\u00da\u00dc\5\20\t\2\u00db\u00da\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00de\7o\2\2")
        buf.write("\u00de\23\3\2\2\2\u00df\u00e2\5\u00aeX\2\u00e0\u00e1\7")
        buf.write("\30\2\2\u00e1\u00e3\5\u00aeX\2\u00e2\u00e0\3\2\2\2\u00e2")
        buf.write("\u00e3\3\2\2\2\u00e3\25\3\2\2\2\u00e4\u00e5\7\31\2\2\u00e5")
        buf.write("\u00e8\7\u0084\2\2\u00e6\u00e7\7\30\2\2\u00e7\u00e9\5")
        buf.write("\u00aeX\2\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9")
        buf.write("\u00ea\3\2\2\2\u00ea\u0107\7\20\2\2\u00eb\u00ee\7\31\2")
        buf.write("\2\u00ec\u00ef\7\32\2\2\u00ed\u00ef\5\u00aeX\2\u00ee\u00ec")
        buf.write("\3\2\2\2\u00ee\u00ed\3\2\2\2\u00ef\u00f2\3\2\2\2\u00f0")
        buf.write("\u00f1\7\30\2\2\u00f1\u00f3\5\u00aeX\2\u00f2\u00f0\3\2")
        buf.write("\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5")
        buf.write("\7\33\2\2\u00f5\u00f6\7\u0084\2\2\u00f6\u0107\7\20\2\2")
        buf.write("\u00f7\u00f8\7\31\2\2\u00f8\u00f9\7\34\2\2\u00f9\u00fe")
        buf.write("\5\24\13\2\u00fa\u00fb\7\35\2\2\u00fb\u00fd\5\24\13\2")
        buf.write("\u00fc\u00fa\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc\3")
        buf.write("\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0101\3\2\2\2\u0100\u00fe")
        buf.write("\3\2\2\2\u0101\u0102\7\36\2\2\u0102\u0103\7\33\2\2\u0103")
        buf.write("\u0104\7\u0084\2\2\u0104\u0105\7\20\2\2\u0105\u0107\3")
        buf.write("\2\2\2\u0106\u00e4\3\2\2\2\u0106\u00eb\3\2\2\2\u0106\u00f7")
        buf.write("\3\2\2\2\u0107\27\3\2\2\2\u0108\u0109\t\5\2\2\u0109\31")
        buf.write("\3\2\2\2\u010a\u010c\5\30\r\2\u010b\u010a\3\2\2\2\u010b")
        buf.write("\u010c\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010e\t\6\2\2")
        buf.write("\u010e\u0118\5\u00aeX\2\u010f\u0110\7\"\2\2\u0110\u0115")
        buf.write("\5\34\17\2\u0111\u0112\7\35\2\2\u0112\u0114\5\34\17\2")
        buf.write("\u0113\u0111\3\2\2\2\u0114\u0117\3\2\2\2\u0115\u0113\3")
        buf.write("\2\2\2\u0115\u0116\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115")
        buf.write("\3\2\2\2\u0118\u010f\3\2\2\2\u0118\u0119\3\2\2\2\u0119")
        buf.write("\u011a\3\2\2\2\u011a\u011e\7\34\2\2\u011b\u011d\5\36\20")
        buf.write("\2\u011c\u011b\3\2\2\2\u011d\u0120\3\2\2\2\u011e\u011c")
        buf.write("\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u0121\3\2\2\2\u0120")
        buf.write("\u011e\3\2\2\2\u0121\u0122\7\36\2\2\u0122\33\3\2\2\2\u0123")
        buf.write("\u0129\5H%\2\u0124\u0126\7#\2\2\u0125\u0127\5z>\2\u0126")
        buf.write("\u0125\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0128\u012a\7$\2\2\u0129\u0124\3\2\2\2\u0129\u012a\3")
        buf.write("\2\2\2\u012a\35\3\2\2\2\u012b\u0134\5 \21\2\u012c\u0134")
        buf.write("\5\"\22\2\u012d\u0134\5$\23\2\u012e\u0134\5&\24\2\u012f")
        buf.write("\u0134\5(\25\2\u0130\u0134\5,\27\2\u0131\u0134\5\62\32")
        buf.write("\2\u0132\u0134\5\66\34\2\u0133\u012b\3\2\2\2\u0133\u012c")
        buf.write("\3\2\2\2\u0133\u012d\3\2\2\2\u0133\u012e\3\2\2\2\u0133")
        buf.write("\u012f\3\2\2\2\u0133\u0130\3\2\2\2\u0133\u0131\3\2\2\2")
        buf.write("\u0133\u0132\3\2\2\2\u0134\37\3\2\2\2\u0135\u0139\5F$")
        buf.write("\2\u0136\u0138\t\7\2\2\u0137\u0136\3\2\2\2\u0138\u013b")
        buf.write("\3\2\2\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a")
        buf.write("\u013c\3\2\2\2\u013b\u0139\3\2\2\2\u013c\u013f\5\u00ae")
        buf.write("X\2\u013d\u013e\7\27\2\2\u013e\u0140\5v<\2\u013f\u013d")
        buf.write("\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0141\3\2\2\2\u0141")
        buf.write("\u0142\7\20\2\2\u0142!\3\2\2\2\u0143\u0144\7%\2\2\u0144")
        buf.write("\u0145\5\u00aeX\2\u0145\u0148\7&\2\2\u0146\u0149\7\32")
        buf.write("\2\2\u0147\u0149\5F$\2\u0148\u0146\3\2\2\2\u0148\u0147")
        buf.write("\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014b\7\20\2\2\u014b")
        buf.write("#\3\2\2\2\u014c\u014d\7\'\2\2\u014d\u014e\5\u00aeX\2\u014e")
        buf.write("\u0159\7\34\2\2\u014f\u0150\5D#\2\u0150\u0156\7\20\2\2")
        buf.write("\u0151\u0152\5D#\2\u0152\u0153\7\20\2\2\u0153\u0155\3")
        buf.write("\2\2\2\u0154\u0151\3\2\2\2\u0155\u0158\3\2\2\2\u0156\u0154")
        buf.write("\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u015a\3\2\2\2\u0158")
        buf.write("\u0156\3\2\2\2\u0159\u014f\3\2\2\2\u0159\u015a\3\2\2\2")
        buf.write("\u015a\u015b\3\2\2\2\u015b\u015c\7\36\2\2\u015c%\3\2\2")
        buf.write("\2\u015d\u015e\7(\2\2\u015e\u015f\58\35\2\u015f\u0160")
        buf.write("\5\60\31\2\u0160\u0161\5R*\2\u0161\'\3\2\2\2\u0162\u0163")
        buf.write("\7)\2\2\u0163\u0165\5\u00aeX\2\u0164\u0166\58\35\2\u0165")
        buf.write("\u0164\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167\3\2\2\2")
        buf.write("\u0167\u0168\5R*\2\u0168)\3\2\2\2\u0169\u016f\5\u00ae")
        buf.write("X\2\u016a\u016c\7#\2\2\u016b\u016d\5z>\2\u016c\u016b\3")
        buf.write("\2\2\2\u016c\u016d\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u0170")
        buf.write("\7$\2\2\u016f\u016a\3\2\2\2\u016f\u0170\3\2\2\2\u0170")
        buf.write("+\3\2\2\2\u0171\u0173\5\30\r\2\u0172\u0171\3\2\2\2\u0172")
        buf.write("\u0173\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0176\7*\2\2")
        buf.write("\u0175\u0177\5\u00aeX\2\u0176\u0175\3\2\2\2\u0176\u0177")
        buf.write("\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\58\35\2\u0179")
        buf.write("\u017b\5\60\31\2\u017a\u017c\5.\30\2\u017b\u017a\3\2\2")
        buf.write("\2\u017b\u017c\3\2\2\2\u017c\u017f\3\2\2\2\u017d\u0180")
        buf.write("\7\20\2\2\u017e\u0180\5R*\2\u017f\u017d\3\2\2\2\u017f")
        buf.write("\u017e\3\2\2\2\u0180-\3\2\2\2\u0181\u0182\7+\2\2\u0182")
        buf.write("\u0183\58\35\2\u0183/\3\2\2\2\u0184\u018b\5*\26\2\u0185")
        buf.write("\u018b\5P)\2\u0186\u018b\7z\2\2\u0187\u018b\7\177\2\2")
        buf.write("\u0188\u018b\7|\2\2\u0189\u018b\7~\2\2\u018a\u0184\3\2")
        buf.write("\2\2\u018a\u0185\3\2\2\2\u018a\u0186\3\2\2\2\u018a\u0187")
        buf.write("\3\2\2\2\u018a\u0188\3\2\2\2\u018a\u0189\3\2\2\2\u018b")
        buf.write("\u018e\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2")
        buf.write("\u018d\61\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u0191\5\30")
        buf.write("\r\2\u0190\u018f\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0192")
        buf.write("\3\2\2\2\u0192\u0193\7,\2\2\u0193\u0194\5\u00aeX\2\u0194")
        buf.write("\u0196\5<\37\2\u0195\u0197\7v\2\2\u0196\u0195\3\2\2\2")
        buf.write("\u0196\u0197\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u0199\7")
        buf.write("\20\2\2\u0199\63\3\2\2\2\u019a\u019b\5\u00aeX\2\u019b")
        buf.write("\65\3\2\2\2\u019c\u019d\7-\2\2\u019d\u019e\5\u00aeX\2")
        buf.write("\u019e\u01a0\7\34\2\2\u019f\u01a1\5\64\33\2\u01a0\u019f")
        buf.write("\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a6\3\2\2\2\u01a2")
        buf.write("\u01a3\7\35\2\2\u01a3\u01a5\5\64\33\2\u01a4\u01a2\3\2")
        buf.write("\2\2\u01a5\u01a8\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a6\u01a7")
        buf.write("\3\2\2\2\u01a7\u01a9\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a9")
        buf.write("\u01aa\7\36\2\2\u01aa\67\3\2\2\2\u01ab\u01b4\7#\2\2\u01ac")
        buf.write("\u01b1\5:\36\2\u01ad\u01ae\7\35\2\2\u01ae\u01b0\5:\36")
        buf.write("\2\u01af\u01ad\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af")
        buf.write("\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3")
        buf.write("\u01b1\3\2\2\2\u01b4\u01ac\3\2\2\2\u01b4\u01b5\3\2\2\2")
        buf.write("\u01b5\u01b6\3\2\2\2\u01b6\u01b7\7$\2\2\u01b79\3\2\2\2")
        buf.write("\u01b8\u01ba\5F$\2\u01b9\u01bb\5N(\2\u01ba\u01b9\3\2\2")
        buf.write("\2\u01ba\u01bb\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01be")
        buf.write("\5\u00aeX\2\u01bd\u01bc\3\2\2\2\u01bd\u01be\3\2\2\2\u01be")
        buf.write(";\3\2\2\2\u01bf\u01c8\7#\2\2\u01c0\u01c5\5> \2\u01c1\u01c2")
        buf.write("\7\35\2\2\u01c2\u01c4\5> \2\u01c3\u01c1\3\2\2\2\u01c4")
        buf.write("\u01c7\3\2\2\2\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2")
        buf.write("\u01c6\u01c9\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c8\u01c0\3")
        buf.write("\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb")
        buf.write("\7$\2\2\u01cb=\3\2\2\2\u01cc\u01ce\5F$\2\u01cd\u01cf\7")
        buf.write("{\2\2\u01ce\u01cd\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d1")
        buf.write("\3\2\2\2\u01d0\u01d2\5\u00aeX\2\u01d1\u01d0\3\2\2\2\u01d1")
        buf.write("\u01d2\3\2\2\2\u01d2?\3\2\2\2\u01d3\u01dc\7#\2\2\u01d4")
        buf.write("\u01d9\5B\"\2\u01d5\u01d6\7\35\2\2\u01d6\u01d8\5B\"\2")
        buf.write("\u01d7\u01d5\3\2\2\2\u01d8\u01db\3\2\2\2\u01d9\u01d7\3")
        buf.write("\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01dd\3\2\2\2\u01db\u01d9")
        buf.write("\3\2\2\2\u01dc\u01d4\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd")
        buf.write("\u01de\3\2\2\2\u01de\u01df\7$\2\2\u01dfA\3\2\2\2\u01e0")
        buf.write("\u01e2\5F$\2\u01e1\u01e3\5N(\2\u01e2\u01e1\3\2\2\2\u01e2")
        buf.write("\u01e3\3\2\2\2\u01e3C\3\2\2\2\u01e4\u01e6\5F$\2\u01e5")
        buf.write("\u01e7\5N(\2\u01e6\u01e5\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write("\u01e8\3\2\2\2\u01e8\u01e9\5\u00aeX\2\u01e9E\3\2\2\2\u01ea")
        buf.write("\u01eb\b$\1\2\u01eb\u01f2\5t;\2\u01ec\u01f2\5H%\2\u01ed")
        buf.write("\u01f2\5J&\2\u01ee\u01f2\5L\'\2\u01ef\u01f0\7\60\2\2\u01f0")
        buf.write("\u01f2\7}\2\2\u01f1\u01ea\3\2\2\2\u01f1\u01ec\3\2\2\2")
        buf.write("\u01f1\u01ed\3\2\2\2\u01f1\u01ee\3\2\2\2\u01f1\u01ef\3")
        buf.write("\2\2\2\u01f2\u01fb\3\2\2\2\u01f3\u01f4\f\5\2\2\u01f4\u01f6")
        buf.write("\7.\2\2\u01f5\u01f7\5v<\2\u01f6\u01f5\3\2\2\2\u01f6\u01f7")
        buf.write("\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\7/\2\2\u01f9")
        buf.write("\u01f3\3\2\2\2\u01fa\u01fd\3\2\2\2\u01fb\u01f9\3\2\2\2")
        buf.write("\u01fb\u01fc\3\2\2\2\u01fcG\3\2\2\2\u01fd\u01fb\3\2\2")
        buf.write("\2\u01fe\u0203\5\u00aeX\2\u01ff\u0200\7\5\2\2\u0200\u0202")
        buf.write("\5\u00aeX\2\u0201\u01ff\3\2\2\2\u0202\u0205\3\2\2\2\u0203")
        buf.write("\u0201\3\2\2\2\u0203\u0204\3\2\2\2\u0204I\3\2\2\2\u0205")
        buf.write("\u0203\3\2\2\2\u0206\u0207\7\61\2\2\u0207\u0208\7#\2\2")
        buf.write("\u0208\u0209\5t;\2\u0209\u020a\7\62\2\2\u020a\u020b\5")
        buf.write("F$\2\u020b\u020c\7$\2\2\u020cK\3\2\2\2\u020d\u020e\7*")
        buf.write("\2\2\u020e\u0214\5@!\2\u020f\u0213\7|\2\2\u0210\u0213")
        buf.write("\7z\2\2\u0211\u0213\5P)\2\u0212\u020f\3\2\2\2\u0212\u0210")
        buf.write("\3\2\2\2\u0212\u0211\3\2\2\2\u0213\u0216\3\2\2\2\u0214")
        buf.write("\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0219\3\2\2\2")
        buf.write("\u0216\u0214\3\2\2\2\u0217\u0218\7+\2\2\u0218\u021a\5")
        buf.write("@!\2\u0219\u0217\3\2\2\2\u0219\u021a\3\2\2\2\u021aM\3")
        buf.write("\2\2\2\u021b\u021c\t\b\2\2\u021cO\3\2\2\2\u021d\u021e")
        buf.write("\t\t\2\2\u021eQ\3\2\2\2\u021f\u0223\7\34\2\2\u0220\u0222")
        buf.write("\5T+\2\u0221\u0220\3\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221")
        buf.write("\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0226\3\2\2\2\u0225")
        buf.write("\u0223\3\2\2\2\u0226\u0227\7\36\2\2\u0227S\3\2\2\2\u0228")
        buf.write("\u0235\5X-\2\u0229\u0235\5Z.\2\u022a\u0235\5^\60\2\u022b")
        buf.write("\u0235\5R*\2\u022c\u0235\5`\61\2\u022d\u0235\5b\62\2\u022e")
        buf.write("\u0235\5d\63\2\u022f\u0235\5f\64\2\u0230\u0235\5h\65\2")
        buf.write("\u0231\u0235\5j\66\2\u0232\u0235\5l\67\2\u0233\u0235\5")
        buf.write("\\/\2\u0234\u0228\3\2\2\2\u0234\u0229\3\2\2\2\u0234\u022a")
        buf.write("\3\2\2\2\u0234\u022b\3\2\2\2\u0234\u022c\3\2\2\2\u0234")
        buf.write("\u022d\3\2\2\2\u0234\u022e\3\2\2\2\u0234\u022f\3\2\2\2")
        buf.write("\u0234\u0230\3\2\2\2\u0234\u0231\3\2\2\2\u0234\u0232\3")
        buf.write("\2\2\2\u0234\u0233\3\2\2\2\u0235U\3\2\2\2\u0236\u0237")
        buf.write("\5v<\2\u0237\u0238\7\20\2\2\u0238W\3\2\2\2\u0239\u023a")
        buf.write("\7\66\2\2\u023a\u023b\7#\2\2\u023b\u023c\5v<\2\u023c\u023d")
        buf.write("\7$\2\2\u023d\u0240\5T+\2\u023e\u023f\7\67\2\2\u023f\u0241")
        buf.write("\5T+\2\u0240\u023e\3\2\2\2\u0240\u0241\3\2\2\2\u0241Y")
        buf.write("\3\2\2\2\u0242\u0243\78\2\2\u0243\u0244\7#\2\2\u0244\u0245")
        buf.write("\5v<\2\u0245\u0246\7$\2\2\u0246\u0247\5T+\2\u0247[\3\2")
        buf.write("\2\2\u0248\u024b\5n8\2\u0249\u024b\5V,\2\u024a\u0248\3")
        buf.write("\2\2\2\u024a\u0249\3\2\2\2\u024b]\3\2\2\2\u024c\u024d")
        buf.write("\7&\2\2\u024d\u0250\7#\2\2\u024e\u0251\5\\/\2\u024f\u0251")
        buf.write("\7\20\2\2\u0250\u024e\3\2\2\2\u0250\u024f\3\2\2\2\u0251")
        buf.write("\u0254\3\2\2\2\u0252\u0255\5V,\2\u0253\u0255\7\20\2\2")
        buf.write("\u0254\u0252\3\2\2\2\u0254\u0253\3\2\2\2\u0255\u0257\3")
        buf.write("\2\2\2\u0256\u0258\5v<\2\u0257\u0256\3\2\2\2\u0257\u0258")
        buf.write("\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\7$\2\2\u025a")
        buf.write("\u025b\5T+\2\u025b_\3\2\2\2\u025c\u025e\79\2\2\u025d\u025f")
        buf.write("\7\u0084\2\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f")
        buf.write("\u0260\3\2\2\2\u0260\u0261\5\u0084C\2\u0261a\3\2\2\2\u0262")
        buf.write("\u0263\7:\2\2\u0263\u0264\5T+\2\u0264\u0265\78\2\2\u0265")
        buf.write("\u0266\7#\2\2\u0266\u0267\5v<\2\u0267\u0268\7$\2\2\u0268")
        buf.write("\u0269\7\20\2\2\u0269c\3\2\2\2\u026a\u026b\7y\2\2\u026b")
        buf.write("\u026c\7\20\2\2\u026ce\3\2\2\2\u026d\u026e\7w\2\2\u026e")
        buf.write("\u026f\7\20\2\2\u026fg\3\2\2\2\u0270\u0272\7;\2\2\u0271")
        buf.write("\u0273\5v<\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2\2\2\u0273")
        buf.write("\u0274\3\2\2\2\u0274\u0275\7\20\2\2\u0275i\3\2\2\2\u0276")
        buf.write("\u0277\7<\2\2\u0277\u0278\7\20\2\2\u0278k\3\2\2\2\u0279")
        buf.write("\u027a\7=\2\2\u027a\u027b\5\u0082B\2\u027b\u027c\7\20")
        buf.write("\2\2\u027cm\3\2\2\2\u027d\u027e\7>\2\2\u027e\u0285\5r")
        buf.write(":\2\u027f\u0285\5D#\2\u0280\u0281\7#\2\2\u0281\u0282\5")
        buf.write("p9\2\u0282\u0283\7$\2\2\u0283\u0285\3\2\2\2\u0284\u027d")
        buf.write("\3\2\2\2\u0284\u027f\3\2\2\2\u0284\u0280\3\2\2\2\u0285")
        buf.write("\u0288\3\2\2\2\u0286\u0287\7\27\2\2\u0287\u0289\5v<\2")
        buf.write("\u0288\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a\3")
        buf.write("\2\2\2\u028a\u028b\7\20\2\2\u028bo\3\2\2\2\u028c\u028e")
        buf.write("\5D#\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0295")
        buf.write("\3\2\2\2\u028f\u0291\7\35\2\2\u0290\u0292\5D#\2\u0291")
        buf.write("\u0290\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0294\3\2\2\2")
        buf.write("\u0293\u028f\3\2\2\2\u0294\u0297\3\2\2\2\u0295\u0293\3")
        buf.write("\2\2\2\u0295\u0296\3\2\2\2\u0296q\3\2\2\2\u0297\u0295")
        buf.write("\3\2\2\2\u0298\u029f\7#\2\2\u0299\u029b\5\u00aeX\2\u029a")
        buf.write("\u0299\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\3\2\2\2")
        buf.write("\u029c\u029e\7\35\2\2\u029d\u029a\3\2\2\2\u029e\u02a1")
        buf.write("\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0")
        buf.write("\u02a3\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a4\5\u00ae")
        buf.write("X\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a5")
        buf.write("\3\2\2\2\u02a5\u02a6\7$\2\2\u02a6s\3\2\2\2\u02a7\u02a8")
        buf.write("\t\n\2\2\u02a8u\3\2\2\2\u02a9\u02aa\b<\1\2\u02aa\u02ab")
        buf.write("\7D\2\2\u02ab\u02bc\5F$\2\u02ac\u02ad\7#\2\2\u02ad\u02ae")
        buf.write("\5v<\2\u02ae\u02af\7$\2\2\u02af\u02bc\3\2\2\2\u02b0\u02b1")
        buf.write("\t\13\2\2\u02b1\u02bc\5v<\25\u02b2\u02b3\t\f\2\2\u02b3")
        buf.write("\u02bc\5v<\24\u02b4\u02b5\t\r\2\2\u02b5\u02bc\5v<\23\u02b6")
        buf.write("\u02b7\7H\2\2\u02b7\u02bc\5v<\22\u02b8\u02b9\7\22\2\2")
        buf.write("\u02b9\u02bc\5v<\21\u02ba\u02bc\5x=\2\u02bb\u02a9\3\2")
        buf.write("\2\2\u02bb\u02ac\3\2\2\2\u02bb\u02b0\3\2\2\2\u02bb\u02b2")
        buf.write("\3\2\2\2\u02bb\u02b4\3\2\2\2\u02bb\u02b6\3\2\2\2\u02bb")
        buf.write("\u02b8\3\2\2\2\u02bb\u02ba\3\2\2\2\u02bc\u02f8\3\2\2\2")
        buf.write("\u02bd\u02be\f\20\2\2\u02be\u02bf\7I\2\2\u02bf\u02f7\5")
        buf.write("v<\21\u02c0\u02c1\f\17\2\2\u02c1\u02c2\t\16\2\2\u02c2")
        buf.write("\u02f7\5v<\20\u02c3\u02c4\f\16\2\2\u02c4\u02c5\t\f\2\2")
        buf.write("\u02c5\u02f7\5v<\17\u02c6\u02c7\f\r\2\2\u02c7\u02c8\t")
        buf.write("\17\2\2\u02c8\u02f7\5v<\16\u02c9\u02ca\f\f\2\2\u02ca\u02cb")
        buf.write("\7N\2\2\u02cb\u02f7\5v<\r\u02cc\u02cd\f\13\2\2\u02cd\u02ce")
        buf.write("\7\21\2\2\u02ce\u02f7\5v<\f\u02cf\u02d0\f\n\2\2\u02d0")
        buf.write("\u02d1\7O\2\2\u02d1\u02f7\5v<\13\u02d2\u02d3\f\t\2\2\u02d3")
        buf.write("\u02d4\t\20\2\2\u02d4\u02f7\5v<\n\u02d5\u02d6\f\b\2\2")
        buf.write("\u02d6\u02d7\t\21\2\2\u02d7\u02f7\5v<\t\u02d8\u02d9\f")
        buf.write("\7\2\2\u02d9\u02da\7R\2\2\u02da\u02f7\5v<\b\u02db\u02dc")
        buf.write("\f\6\2\2\u02dc\u02dd\7S\2\2\u02dd\u02f7\5v<\7\u02de\u02df")
        buf.write("\f\5\2\2\u02df\u02e0\7T\2\2\u02e0\u02e1\5v<\2\u02e1\u02e2")
        buf.write("\7U\2\2\u02e2\u02e3\5v<\6\u02e3\u02f7\3\2\2\2\u02e4\u02e5")
        buf.write("\f\4\2\2\u02e5\u02e6\t\22\2\2\u02e6\u02f7\5v<\5\u02e7")
        buf.write("\u02e8\f\33\2\2\u02e8\u02f7\t\13\2\2\u02e9\u02ea\f\31")
        buf.write("\2\2\u02ea\u02eb\7.\2\2\u02eb\u02ec\5v<\2\u02ec\u02ed")
        buf.write("\7/\2\2\u02ed\u02f7\3\2\2\2\u02ee\u02ef\f\30\2\2\u02ef")
        buf.write("\u02f0\7#\2\2\u02f0\u02f1\5\u0080A\2\u02f1\u02f2\7$\2")
        buf.write("\2\u02f2\u02f7\3\2\2\2\u02f3\u02f4\f\27\2\2\u02f4\u02f5")
        buf.write("\7\5\2\2\u02f5\u02f7\5\u00aeX\2\u02f6\u02bd\3\2\2\2\u02f6")
        buf.write("\u02c0\3\2\2\2\u02f6\u02c3\3\2\2\2\u02f6\u02c6\3\2\2\2")
        buf.write("\u02f6\u02c9\3\2\2\2\u02f6\u02cc\3\2\2\2\u02f6\u02cf\3")
        buf.write("\2\2\2\u02f6\u02d2\3\2\2\2\u02f6\u02d5\3\2\2\2\u02f6\u02d8")
        buf.write("\3\2\2\2\u02f6\u02db\3\2\2\2\u02f6\u02de\3\2\2\2\u02f6")
        buf.write("\u02e4\3\2\2\2\u02f6\u02e7\3\2\2\2\u02f6\u02e9\3\2\2\2")
        buf.write("\u02f6\u02ee\3\2\2\2\u02f6\u02f3\3\2\2\2\u02f7\u02fa\3")
        buf.write("\2\2\2\u02f8\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9w")
        buf.write("\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fb\u030c\7p\2\2\u02fc")
        buf.write("\u030c\5\u00acW\2\u02fd\u030c\7t\2\2\u02fe\u030c\7\u0084")
        buf.write("\2\2\u02ff\u0302\5\u00aeX\2\u0300\u0301\7.\2\2\u0301\u0303")
        buf.write("\7/\2\2\u0302\u0300\3\2\2\2\u0302\u0303\3\2\2\2\u0303")
        buf.write("\u030c\3\2\2\2\u0304\u030c\7\u0081\2\2\u0305\u030c\5\u00a8")
        buf.write("U\2\u0306\u0309\5\u00aaV\2\u0307\u0308\7.\2\2\u0308\u030a")
        buf.write("\7/\2\2\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a")
        buf.write("\u030c\3\2\2\2\u030b\u02fb\3\2\2\2\u030b\u02fc\3\2\2\2")
        buf.write("\u030b\u02fd\3\2\2\2\u030b\u02fe\3\2\2\2\u030b\u02ff\3")
        buf.write("\2\2\2\u030b\u0304\3\2\2\2\u030b\u0305\3\2\2\2\u030b\u0306")
        buf.write("\3\2\2\2\u030cy\3\2\2\2\u030d\u0312\5v<\2\u030e\u030f")
        buf.write("\7\35\2\2\u030f\u0311\5v<\2\u0310\u030e\3\2\2\2\u0311")
        buf.write("\u0314\3\2\2\2\u0312\u0310\3\2\2\2\u0312\u0313\3\2\2\2")
        buf.write("\u0313{\3\2\2\2\u0314\u0312\3\2\2\2\u0315\u031a\5~@\2")
        buf.write("\u0316\u0317\7\35\2\2\u0317\u0319\5~@\2\u0318\u0316\3")
        buf.write("\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b")
        buf.write("\3\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3\2\2\2\u031d")
        buf.write("\u031f\7\35\2\2\u031e\u031d\3\2\2\2\u031e\u031f\3\2\2")
        buf.write("\2\u031f}\3\2\2\2\u0320\u0321\5\u00aeX\2\u0321\u0322\7")
        buf.write("U\2\2\u0322\u0323\5v<\2\u0323\177\3\2\2\2\u0324\u0326")
        buf.write("\7\34\2\2\u0325\u0327\5|?\2\u0326\u0325\3\2\2\2\u0326")
        buf.write("\u0327\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u032d\7\36\2")
        buf.write("\2\u0329\u032b\5z>\2\u032a\u0329\3\2\2\2\u032a\u032b\3")
        buf.write("\2\2\2\u032b\u032d\3\2\2\2\u032c\u0324\3\2\2\2\u032c\u032a")
        buf.write("\3\2\2\2\u032d\u0081\3\2\2\2\u032e\u032f\5v<\2\u032f\u0330")
        buf.write("\7#\2\2\u0330\u0331\5\u0080A\2\u0331\u0332\7$\2\2\u0332")
        buf.write("\u0083\3\2\2\2\u0333\u0337\7\34\2\2\u0334\u0336\5\u0086")
        buf.write("D\2\u0335\u0334\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335")
        buf.write("\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033a\3\2\2\2\u0339")
        buf.write("\u0337\3\2\2\2\u033a\u033b\7\36\2\2\u033b\u0085\3\2\2")
        buf.write("\2\u033c\u034e\5\u00aeX\2\u033d\u034e\5\u0084C\2\u033e")
        buf.write("\u034e\5\u0088E\2\u033f\u034e\5\u008cG\2\u0340\u034e\5")
        buf.write("\u008eH\2\u0341\u034e\5\u0094K\2\u0342\u034e\5\u0096L")
        buf.write("\2\u0343\u034e\5\u0098M\2\u0344\u034e\5\u009cO\2\u0345")
        buf.write("\u034e\5\u00a0Q\2\u0346\u034e\5\u00a2R\2\u0347\u034e\7")
        buf.write("w\2\2\u0348\u034e\7y\2\2\u0349\u034e\5\u00a6T\2\u034a")
        buf.write("\u034e\5\u00acW\2\u034b\u034e\7\u0084\2\2\u034c\u034e")
        buf.write("\7t\2\2\u034d\u033c\3\2\2\2\u034d\u033d\3\2\2\2\u034d")
        buf.write("\u033e\3\2\2\2\u034d\u033f\3\2\2\2\u034d\u0340\3\2\2\2")
        buf.write("\u034d\u0341\3\2\2\2\u034d\u0342\3\2\2\2\u034d\u0343\3")
        buf.write("\2\2\2\u034d\u0344\3\2\2\2\u034d\u0345\3\2\2\2\u034d\u0346")
        buf.write("\3\2\2\2\u034d\u0347\3\2\2\2\u034d\u0348\3\2\2\2\u034d")
        buf.write("\u0349\3\2\2\2\u034d\u034a\3\2\2\2\u034d\u034b\3\2\2\2")
        buf.write("\u034d\u034c\3\2\2\2\u034e\u0087\3\2\2\2\u034f\u0352\5")
        buf.write("\u008aF\2\u0350\u0352\5\u00a4S\2\u0351\u034f\3\2\2\2\u0351")
        buf.write("\u0350\3\2\2\2\u0352\u0089\3\2\2\2\u0353\u0358\7;\2\2")
        buf.write("\u0354\u0358\7\60\2\2\u0355\u0358\7A\2\2\u0356\u0358\5")
        buf.write("\u00aeX\2\u0357\u0353\3\2\2\2\u0357\u0354\3\2\2\2\u0357")
        buf.write("\u0355\3\2\2\2\u0357\u0356\3\2\2\2\u0358\u0365\3\2\2\2")
        buf.write("\u0359\u035b\7#\2\2\u035a\u035c\5\u0088E\2\u035b\u035a")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0361\3\2\2\2\u035d")
        buf.write("\u035e\7\35\2\2\u035e\u0360\5\u0088E\2\u035f\u035d\3\2")
        buf.write("\2\2\u0360\u0363\3\2\2\2\u0361\u035f\3\2\2\2\u0361\u0362")
        buf.write("\3\2\2\2\u0362\u0364\3\2\2\2\u0363\u0361\3\2\2\2\u0364")
        buf.write("\u0366\7$\2\2\u0365\u0359\3\2\2\2\u0365\u0366\3\2\2\2")
        buf.write("\u0366\u008b\3\2\2\2\u0367\u0368\7`\2\2\u0368\u036b\5")
        buf.write("\u0090I\2\u0369\u036a\7a\2\2\u036a\u036c\5\u0088E\2\u036b")
        buf.write("\u0369\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u008d\3\2\2\2")
        buf.write("\u036d\u036e\5\u0090I\2\u036e\u036f\7a\2\2\u036f\u0370")
        buf.write("\5\u0088E\2\u0370\u008f\3\2\2\2\u0371\u0377\5\u00aeX\2")
        buf.write("\u0372\u0373\7#\2\2\u0373\u0374\5\u0092J\2\u0374\u0375")
        buf.write("\7$\2\2\u0375\u0377\3\2\2\2\u0376\u0371\3\2\2\2\u0376")
        buf.write("\u0372\3\2\2\2\u0377\u0091\3\2\2\2\u0378\u037d\5\u00ae")
        buf.write("X\2\u0379\u037a\7\35\2\2\u037a\u037c\5\u00aeX\2\u037b")
        buf.write("\u0379\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3\2\2\2")
        buf.write("\u037d\u037e\3\2\2\2\u037e\u0093\3\2\2\2\u037f\u037d\3")
        buf.write("\2\2\2\u0380\u0381\7b\2\2\u0381\u0382\5\u00aeX\2\u0382")
        buf.write("\u0095\3\2\2\2\u0383\u0384\5\u00aeX\2\u0384\u0385\7U\2")
        buf.write("\2\u0385\u0097\3\2\2\2\u0386\u0387\7c\2\2\u0387\u038b")
        buf.write("\5\u0088E\2\u0388\u038a\5\u009aN\2\u0389\u0388\3\2\2\2")
        buf.write("\u038a\u038d\3\2\2\2\u038b\u0389\3\2\2\2\u038b\u038c\3")
        buf.write("\2\2\2\u038c\u0099\3\2\2\2\u038d\u038b\3\2\2\2\u038e\u038f")
        buf.write("\7d\2\2\u038f\u0390\5\u00a4S\2\u0390\u0391\5\u0084C\2")
        buf.write("\u0391\u0395\3\2\2\2\u0392\u0393\7e\2\2\u0393\u0395\5")
        buf.write("\u0084C\2\u0394\u038e\3\2\2\2\u0394\u0392\3\2\2\2\u0395")
        buf.write("\u009b\3\2\2\2\u0396\u0397\7*\2\2\u0397\u0398\5\u00ae")
        buf.write("X\2\u0398\u039a\7#\2\2\u0399\u039b\5\u0092J\2\u039a\u0399")
        buf.write("\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c")
        buf.write("\u039e\7$\2\2\u039d\u039f\5\u009eP\2\u039e\u039d\3\2\2")
        buf.write("\2\u039e\u039f\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1")
        buf.write("\5\u0084C\2\u03a1\u009d\3\2\2\2\u03a2\u03a3\7f\2\2\u03a3")
        buf.write("\u03a4\5\u0092J\2\u03a4\u009f\3\2\2\2\u03a5\u03a8\7&\2")
        buf.write("\2\u03a6\u03a9\5\u0084C\2\u03a7\u03a9\5\u0088E\2\u03a8")
        buf.write("\u03a6\3\2\2\2\u03a8\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2")
        buf.write("\u03aa\u03ad\5\u0088E\2\u03ab\u03ae\5\u0084C\2\u03ac\u03ae")
        buf.write("\5\u0088E\2\u03ad\u03ab\3\2\2\2\u03ad\u03ac\3\2\2\2\u03ae")
        buf.write("\u03af\3\2\2\2\u03af\u03b0\5\u0084C\2\u03b0\u00a1\3\2")
        buf.write("\2\2\u03b1\u03b2\7\66\2\2\u03b2\u03b3\5\u0088E\2\u03b3")
        buf.write("\u03b4\5\u0084C\2\u03b4\u00a3\3\2\2\2\u03b5\u03b6\t\23")
        buf.write("\2\2\u03b6\u00a5\3\2\2\2\u03b7\u03b8\79\2\2\u03b8\u03b9")
        buf.write("\5\u00aeX\2\u03b9\u03ba\5\u0084C\2\u03ba\u00a7\3\2\2\2")
        buf.write("\u03bb\u03bd\7#\2\2\u03bc\u03be\5v<\2\u03bd\u03bc\3\2")
        buf.write("\2\2\u03bd\u03be\3\2\2\2\u03be\u03c5\3\2\2\2\u03bf\u03c1")
        buf.write("\7\35\2\2\u03c0\u03c2\5v<\2\u03c1\u03c0\3\2\2\2\u03c1")
        buf.write("\u03c2\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3\u03bf\3\2\2\2")
        buf.write("\u03c4\u03c7\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3")
        buf.write("\2\2\2\u03c6\u03c8\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8\u03d6")
        buf.write("\7$\2\2\u03c9\u03d2\7.\2\2\u03ca\u03cf\5v<\2\u03cb\u03cc")
        buf.write("\7\35\2\2\u03cc\u03ce\5v<\2\u03cd\u03cb\3\2\2\2\u03ce")
        buf.write("\u03d1\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2")
        buf.write("\u03d0\u03d3\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d2\u03ca\3")
        buf.write("\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d6")
        buf.write("\7/\2\2\u03d5\u03bb\3\2\2\2\u03d5\u03c9\3\2\2\2\u03d6")
        buf.write("\u00a9\3\2\2\2\u03d7\u03da\5t;\2\u03d8\u03da\5H%\2\u03d9")
        buf.write("\u03d7\3\2\2\2\u03d9\u03d8\3\2\2\2\u03da\u00ab\3\2\2\2")
        buf.write("\u03db\u03dd\t\24\2\2\u03dc\u03de\7s\2\2\u03dd\u03dc\3")
        buf.write("\2\2\2\u03dd\u03de\3\2\2\2\u03de\u00ad\3\2\2\2\u03df\u03e0")
        buf.write("\t\25\2\2\u03e0\u00af\3\2\2\2p\u00b4\u00b6\u00c0\u00c5")
        buf.write("\u00d2\u00d6\u00db\u00e2\u00e8\u00ee\u00f2\u00fe\u0106")
        buf.write("\u010b\u0115\u0118\u011e\u0126\u0129\u0133\u0139\u013f")
        buf.write("\u0148\u0156\u0159\u0165\u016c\u016f\u0172\u0176\u017b")
        buf.write("\u017f\u018a\u018c\u0190\u0196\u01a0\u01a6\u01b1\u01b4")
        buf.write("\u01ba\u01bd\u01c5\u01c8\u01ce\u01d1\u01d9\u01dc\u01e2")
        buf.write("\u01e6\u01f1\u01f6\u01fb\u0203\u0212\u0214\u0219\u0223")
        buf.write("\u0234\u0240\u024a\u0250\u0254\u0257\u025e\u0272\u0284")
        buf.write("\u0288\u028d\u0291\u0295\u029a\u029f\u02a3\u02bb\u02f6")
        buf.write("\u02f8\u0302\u0309\u030b\u0312\u031a\u031e\u0326\u032a")
        buf.write("\u032c\u0337\u034d\u0351\u0357\u035b\u0361\u0365\u036b")
        buf.write("\u0376\u037d\u038b\u0394\u039a\u039e\u03a8\u03ad\u03bd")
        buf.write("\u03c1\u03c5\u03cf\u03d2\u03d5\u03d9\u03dd")
        return buf.getvalue()


class SolidityvulnerabilityParser ( Parser ):

    grammarFileName = "Solidityvulnerability.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'now'", "'block'", "'.'", "'timestamp'", 
                     "'number'", "'+'", "'seconds'", "'minutes'", "'hours'", 
                     "'days'", "'weeks'", "'years'", "'pragma'", "';'", 
                     "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", 
                     "'as'", "'import'", "'*'", "'from'", "'{'", "','", 
                     "'}'", "'contract'", "'interface'", "'library'", "'is'", 
                     "'('", "')'", "'using'", "'for'", "'struct'", "'constructor'", 
                     "'modifier'", "'function'", "'returns'", "'event'", 
                     "'enum'", "'['", "']'", "'address'", "'mapping'", "'=>'", 
                     "'memory'", "'storage'", "'calldata'", "'if'", "'else'", 
                     "'while'", "'assembly'", "'do'", "'return'", "'throw'", 
                     "'emit'", "'var'", "'bool'", "'string'", "'byte'", 
                     "'++'", "'--'", "'new'", "'-'", "'after'", "'delete'", 
                     "'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", 
                     "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", "':'", 
                     "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", 
                     "'case'", "'default'", "'->'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'anonymous'", "'break'", "'constant'", 
                     "'continue'", "'external'", "'indexed'", "'internal'", 
                     "'payable'", "'private'", "'public'", "'pure'", "'type'", 
                     "'view'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "INT", "NatSpecSingleLine", "NatSpecMultiLine", 
                      "Int", "Uint", "Byte", "Fixed", "Ufixed", "VersionLiteral", 
                      "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
                      "HexLiteral", "ReservedKeyword", "AnonymousKeyword", 
                      "BreakKeyword", "ConstantKeyword", "ContinueKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "PureKeyword", "TypeKeyword", "ViewKeyword", "Identifier", 
                      "StringLiteral", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_timestamp = 1
    RULE_unit = 2
    RULE_pragmaDirective = 3
    RULE_pragmaName = 4
    RULE_pragmaValue = 5
    RULE_version = 6
    RULE_versionOperator = 7
    RULE_versionConstraint = 8
    RULE_importDeclaration = 9
    RULE_importDirective = 10
    RULE_natSpec = 11
    RULE_contractDefinition = 12
    RULE_inheritanceSpecifier = 13
    RULE_contractPart = 14
    RULE_stateVariableDeclaration = 15
    RULE_usingForDeclaration = 16
    RULE_structDefinition = 17
    RULE_constructorDefinition = 18
    RULE_modifierDefinition = 19
    RULE_modifierInvocation = 20
    RULE_functionDefinition = 21
    RULE_returnParameters = 22
    RULE_modifierList = 23
    RULE_eventDefinition = 24
    RULE_enumValue = 25
    RULE_enumDefinition = 26
    RULE_parameterList = 27
    RULE_parameter = 28
    RULE_eventParameterList = 29
    RULE_eventParameter = 30
    RULE_functionTypeParameterList = 31
    RULE_functionTypeParameter = 32
    RULE_variableDeclaration = 33
    RULE_typeName = 34
    RULE_userDefinedTypeName = 35
    RULE_mapping = 36
    RULE_functionTypeName = 37
    RULE_storageLocation = 38
    RULE_stateMutability = 39
    RULE_block = 40
    RULE_statement = 41
    RULE_expressionStatement = 42
    RULE_ifStatement = 43
    RULE_whileStatement = 44
    RULE_simpleStatement = 45
    RULE_forStatement = 46
    RULE_inlineAssemblyStatement = 47
    RULE_doWhileStatement = 48
    RULE_continueStatement = 49
    RULE_breakStatement = 50
    RULE_returnStatement = 51
    RULE_throwStatement = 52
    RULE_emitStatement = 53
    RULE_variableDeclarationStatement = 54
    RULE_variableDeclarationList = 55
    RULE_identifierList = 56
    RULE_elementaryTypeName = 57
    RULE_expression = 58
    RULE_primaryExpression = 59
    RULE_expressionList = 60
    RULE_nameValueList = 61
    RULE_nameValue = 62
    RULE_functionCallArguments = 63
    RULE_functionCall = 64
    RULE_assemblyBlock = 65
    RULE_assemblyItem = 66
    RULE_assemblyExpression = 67
    RULE_assemblyCall = 68
    RULE_assemblyLocalDefinition = 69
    RULE_assemblyAssignment = 70
    RULE_assemblyIdentifierOrList = 71
    RULE_assemblyIdentifierList = 72
    RULE_assemblyStackAssignment = 73
    RULE_labelDefinition = 74
    RULE_assemblySwitch = 75
    RULE_assemblyCase = 76
    RULE_assemblyFunctionDefinition = 77
    RULE_assemblyFunctionReturns = 78
    RULE_assemblyFor = 79
    RULE_assemblyIf = 80
    RULE_assemblyLiteral = 81
    RULE_subAssembly = 82
    RULE_tupleExpression = 83
    RULE_typeNameExpression = 84
    RULE_numberLiteral = 85
    RULE_identifier = 86

    ruleNames =  [ "sourceUnit", "timestamp", "unit", "pragmaDirective", 
                   "pragmaName", "pragmaValue", "version", "versionOperator", 
                   "versionConstraint", "importDeclaration", "importDirective", 
                   "natSpec", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "constructorDefinition", "modifierDefinition", 
                   "modifierInvocation", "functionDefinition", "returnParameters", 
                   "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
                   "parameterList", "parameter", "eventParameterList", "eventParameter", 
                   "functionTypeParameterList", "functionTypeParameter", 
                   "variableDeclaration", "typeName", "userDefinedTypeName", 
                   "mapping", "functionTypeName", "storageLocation", "stateMutability", 
                   "block", "statement", "expressionStatement", "ifStatement", 
                   "whileStatement", "simpleStatement", "forStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "assemblyBlock", "assemblyItem", "assemblyExpression", 
                   "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
                   "assemblyIdentifierOrList", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", 
                   "tupleExpression", "typeNameExpression", "numberLiteral", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    INT=101
    NatSpecSingleLine=102
    NatSpecMultiLine=103
    Int=104
    Uint=105
    Byte=106
    Fixed=107
    Ufixed=108
    VersionLiteral=109
    BooleanLiteral=110
    DecimalNumber=111
    HexNumber=112
    NumberUnit=113
    HexLiteral=114
    ReservedKeyword=115
    AnonymousKeyword=116
    BreakKeyword=117
    ConstantKeyword=118
    ContinueKeyword=119
    ExternalKeyword=120
    IndexedKeyword=121
    InternalKeyword=122
    PayableKeyword=123
    PrivateKeyword=124
    PublicKeyword=125
    PureKeyword=126
    TypeKeyword=127
    ViewKeyword=128
    Identifier=129
    StringLiteral=130
    WS=131
    COMMENT=132
    LINE_COMMENT=133

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class SourceUnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityvulnerabilityParser.EOF, 0)

        def timestamp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.TimestampContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.TimestampContext,i)


        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ImportDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)




    def sourceUnit(self):

        localctx = SolidityvulnerabilityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__0) | (1 << SolidityvulnerabilityParser.T__1) | (1 << SolidityvulnerabilityParser.T__12) | (1 << SolidityvulnerabilityParser.T__22) | (1 << SolidityvulnerabilityParser.T__28) | (1 << SolidityvulnerabilityParser.T__29) | (1 << SolidityvulnerabilityParser.T__30))) != 0) or _la==SolidityvulnerabilityParser.NatSpecSingleLine or _la==SolidityvulnerabilityParser.NatSpecMultiLine:
                self.state = 178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityvulnerabilityParser.T__0, SolidityvulnerabilityParser.T__1]:
                    self.state = 174
                    self.timestamp()
                    pass
                elif token in [SolidityvulnerabilityParser.T__12]:
                    self.state = 175
                    self.pragmaDirective()
                    pass
                elif token in [SolidityvulnerabilityParser.T__22]:
                    self.state = 176
                    self.importDirective()
                    pass
                elif token in [SolidityvulnerabilityParser.T__28, SolidityvulnerabilityParser.T__29, SolidityvulnerabilityParser.T__30, SolidityvulnerabilityParser.NatSpecSingleLine, SolidityvulnerabilityParser.NatSpecMultiLine]:
                    self.state = 177
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 183
            self.match(SolidityvulnerabilityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimestampContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(SolidityvulnerabilityParser.INT, 0)

        def unit(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.UnitContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_timestamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestamp" ):
                listener.enterTimestamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestamp" ):
                listener.exitTimestamp(self)




    def timestamp(self):

        localctx = SolidityvulnerabilityParser.TimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_timestamp)
        self._la = 0 # Token type
        try:
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 185
                self.match(SolidityvulnerabilityParser.T__0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 186
                self.match(SolidityvulnerabilityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 187
                self.match(SolidityvulnerabilityParser.T__1)
                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityvulnerabilityParser.T__2:
                    self.state = 188
                    self.match(SolidityvulnerabilityParser.T__2)
                    self.state = 189
                    _la = self._input.LA(1)
                    if not(_la==SolidityvulnerabilityParser.T__3 or _la==SolidityvulnerabilityParser.T__4):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 192
                self.match(SolidityvulnerabilityParser.T__5)
                self.state = 193
                self.match(SolidityvulnerabilityParser.INT)
                self.state = 194
                self.unit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit" ):
                listener.enterUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit" ):
                listener.exitUnit(self)




    def unit(self):

        localctx = SolidityvulnerabilityParser.UnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__6) | (1 << SolidityvulnerabilityParser.T__7) | (1 << SolidityvulnerabilityParser.T__8) | (1 << SolidityvulnerabilityParser.T__9) | (1 << SolidityvulnerabilityParser.T__10) | (1 << SolidityvulnerabilityParser.T__11))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)




    def pragmaDirective(self):

        localctx = SolidityvulnerabilityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(SolidityvulnerabilityParser.T__12)
            self.state = 200
            self.pragmaName()
            self.state = 201
            self.pragmaValue()
            self.state = 202
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)




    def pragmaName(self):

        localctx = SolidityvulnerabilityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)




    def pragmaValue(self):

        localctx = SolidityvulnerabilityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_pragmaValue)
        try:
            self.state = 208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 206
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 207
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)




    def version(self):

        localctx = SolidityvulnerabilityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.versionConstraint()
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__14) | (1 << SolidityvulnerabilityParser.T__15) | (1 << SolidityvulnerabilityParser.T__16) | (1 << SolidityvulnerabilityParser.T__17) | (1 << SolidityvulnerabilityParser.T__18) | (1 << SolidityvulnerabilityParser.T__19) | (1 << SolidityvulnerabilityParser.T__20))) != 0) or _la==SolidityvulnerabilityParser.VersionLiteral:
                self.state = 211
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)




    def versionOperator(self):

        localctx = SolidityvulnerabilityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__14) | (1 << SolidityvulnerabilityParser.T__15) | (1 << SolidityvulnerabilityParser.T__16) | (1 << SolidityvulnerabilityParser.T__17) | (1 << SolidityvulnerabilityParser.T__18) | (1 << SolidityvulnerabilityParser.T__19) | (1 << SolidityvulnerabilityParser.T__20))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)




    def versionConstraint(self):

        localctx = SolidityvulnerabilityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__14) | (1 << SolidityvulnerabilityParser.T__15) | (1 << SolidityvulnerabilityParser.T__16) | (1 << SolidityvulnerabilityParser.T__17) | (1 << SolidityvulnerabilityParser.T__18) | (1 << SolidityvulnerabilityParser.T__19) | (1 << SolidityvulnerabilityParser.T__20))) != 0):
                self.state = 216
                self.versionOperator()


            self.state = 219
            self.match(SolidityvulnerabilityParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = SolidityvulnerabilityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.identifier()
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__21:
                self.state = 222
                self.match(SolidityvulnerabilityParser.T__21)
                self.state = 223
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.StringLiteral, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)




    def importDirective(self):

        localctx = SolidityvulnerabilityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.match(SolidityvulnerabilityParser.T__22)
                self.state = 227
                self.match(SolidityvulnerabilityParser.StringLiteral)
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityvulnerabilityParser.T__21:
                    self.state = 228
                    self.match(SolidityvulnerabilityParser.T__21)
                    self.state = 229
                    self.identifier()


                self.state = 232
                self.match(SolidityvulnerabilityParser.T__13)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 233
                self.match(SolidityvulnerabilityParser.T__22)
                self.state = 236
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityvulnerabilityParser.T__23]:
                    self.state = 234
                    self.match(SolidityvulnerabilityParser.T__23)
                    pass
                elif token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.Identifier]:
                    self.state = 235
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityvulnerabilityParser.T__21:
                    self.state = 238
                    self.match(SolidityvulnerabilityParser.T__21)
                    self.state = 239
                    self.identifier()


                self.state = 242
                self.match(SolidityvulnerabilityParser.T__24)
                self.state = 243
                self.match(SolidityvulnerabilityParser.StringLiteral)
                self.state = 244
                self.match(SolidityvulnerabilityParser.T__13)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 245
                self.match(SolidityvulnerabilityParser.T__22)
                self.state = 246
                self.match(SolidityvulnerabilityParser.T__25)
                self.state = 247
                self.importDeclaration()
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityvulnerabilityParser.T__26:
                    self.state = 248
                    self.match(SolidityvulnerabilityParser.T__26)
                    self.state = 249
                    self.importDeclaration()
                    self.state = 254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 255
                self.match(SolidityvulnerabilityParser.T__27)
                self.state = 256
                self.match(SolidityvulnerabilityParser.T__24)
                self.state = 257
                self.match(SolidityvulnerabilityParser.StringLiteral)
                self.state = 258
                self.match(SolidityvulnerabilityParser.T__13)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NatSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NatSpecSingleLine(self):
            return self.getToken(SolidityvulnerabilityParser.NatSpecSingleLine, 0)

        def NatSpecMultiLine(self):
            return self.getToken(SolidityvulnerabilityParser.NatSpecMultiLine, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_natSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNatSpec" ):
                listener.enterNatSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNatSpec" ):
                listener.exitNatSpec(self)




    def natSpec(self):

        localctx = SolidityvulnerabilityParser.NatSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_natSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            _la = self._input.LA(1)
            if not(_la==SolidityvulnerabilityParser.NatSpecSingleLine or _la==SolidityvulnerabilityParser.NatSpecMultiLine):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.NatSpecContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)




    def contractDefinition(self):

        localctx = SolidityvulnerabilityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.NatSpecSingleLine or _la==SolidityvulnerabilityParser.NatSpecMultiLine:
                self.state = 264
                self.natSpec()


            self.state = 267
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__28) | (1 << SolidityvulnerabilityParser.T__29) | (1 << SolidityvulnerabilityParser.T__30))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 268
            self.identifier()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__31:
                self.state = 269
                self.match(SolidityvulnerabilityParser.T__31)
                self.state = 270
                self.inheritanceSpecifier()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityvulnerabilityParser.T__26:
                    self.state = 271
                    self.match(SolidityvulnerabilityParser.T__26)
                    self.state = 272
                    self.inheritanceSpecifier()
                    self.state = 277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 280
            self.match(SolidityvulnerabilityParser.T__25)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__34) | (1 << SolidityvulnerabilityParser.T__36) | (1 << SolidityvulnerabilityParser.T__37) | (1 << SolidityvulnerabilityParser.T__38) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__41) | (1 << SolidityvulnerabilityParser.T__42) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__46) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__59) | (1 << SolidityvulnerabilityParser.T__60) | (1 << SolidityvulnerabilityParser.T__61) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (SolidityvulnerabilityParser.NatSpecSingleLine - 102)) | (1 << (SolidityvulnerabilityParser.NatSpecMultiLine - 102)) | (1 << (SolidityvulnerabilityParser.Int - 102)) | (1 << (SolidityvulnerabilityParser.Uint - 102)) | (1 << (SolidityvulnerabilityParser.Byte - 102)) | (1 << (SolidityvulnerabilityParser.Fixed - 102)) | (1 << (SolidityvulnerabilityParser.Ufixed - 102)) | (1 << (SolidityvulnerabilityParser.Identifier - 102)))) != 0):
                self.state = 281
                self.contractPart()
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 287
            self.match(SolidityvulnerabilityParser.T__27)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InheritanceSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)




    def inheritanceSpecifier(self):

        localctx = SolidityvulnerabilityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.userDefinedTypeName()
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__32:
                self.state = 290
                self.match(SolidityvulnerabilityParser.T__32)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                    self.state = 291
                    self.expressionList()


                self.state = 294
                self.match(SolidityvulnerabilityParser.T__33)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.StructDefinitionContext,0)


        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ConstructorDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)




    def contractPart(self):

        localctx = SolidityvulnerabilityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_contractPart)
        try:
            self.state = 305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 298
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 299
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 300
                self.constructorDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 301
                self.modifierDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 302
                self.functionDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 303
                self.eventDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 304
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.PublicKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.InternalKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.ConstantKeyword, i)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)




    def stateVariableDeclaration(self):

        localctx = SolidityvulnerabilityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.typeName(0)
            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (SolidityvulnerabilityParser.ConstantKeyword - 118)) | (1 << (SolidityvulnerabilityParser.InternalKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PrivateKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PublicKeyword - 118)))) != 0):
                self.state = 308
                _la = self._input.LA(1)
                if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (SolidityvulnerabilityParser.ConstantKeyword - 118)) | (1 << (SolidityvulnerabilityParser.InternalKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PrivateKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PublicKeyword - 118)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 314
            self.identifier()
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__20:
                self.state = 315
                self.match(SolidityvulnerabilityParser.T__20)
                self.state = 316
                self.expression(0)


            self.state = 319
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingForDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)




    def usingForDeclaration(self):

        localctx = SolidityvulnerabilityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(SolidityvulnerabilityParser.T__34)
            self.state = 322
            self.identifier()
            self.state = 323
            self.match(SolidityvulnerabilityParser.T__35)
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__23]:
                self.state = 324
                self.match(SolidityvulnerabilityParser.T__23)
                pass
            elif token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__39, SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__46, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.T__59, SolidityvulnerabilityParser.T__60, SolidityvulnerabilityParser.T__61, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.Int, SolidityvulnerabilityParser.Uint, SolidityvulnerabilityParser.Byte, SolidityvulnerabilityParser.Fixed, SolidityvulnerabilityParser.Ufixed, SolidityvulnerabilityParser.Identifier]:
                self.state = 325
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 328
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)




    def structDefinition(self):

        localctx = SolidityvulnerabilityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(SolidityvulnerabilityParser.T__36)
            self.state = 331
            self.identifier()
            self.state = 332
            self.match(SolidityvulnerabilityParser.T__25)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__46) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__59) | (1 << SolidityvulnerabilityParser.T__60) | (1 << SolidityvulnerabilityParser.T__61) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityvulnerabilityParser.Int - 104)) | (1 << (SolidityvulnerabilityParser.Uint - 104)) | (1 << (SolidityvulnerabilityParser.Byte - 104)) | (1 << (SolidityvulnerabilityParser.Fixed - 104)) | (1 << (SolidityvulnerabilityParser.Ufixed - 104)) | (1 << (SolidityvulnerabilityParser.Identifier - 104)))) != 0):
                self.state = 333
                self.variableDeclaration()
                self.state = 334
                self.match(SolidityvulnerabilityParser.T__13)
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__46) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__59) | (1 << SolidityvulnerabilityParser.T__60) | (1 << SolidityvulnerabilityParser.T__61) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityvulnerabilityParser.Int - 104)) | (1 << (SolidityvulnerabilityParser.Uint - 104)) | (1 << (SolidityvulnerabilityParser.Byte - 104)) | (1 << (SolidityvulnerabilityParser.Fixed - 104)) | (1 << (SolidityvulnerabilityParser.Ufixed - 104)) | (1 << (SolidityvulnerabilityParser.Identifier - 104)))) != 0):
                    self.state = 335
                    self.variableDeclaration()
                    self.state = 336
                    self.match(SolidityvulnerabilityParser.T__13)
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 345
            self.match(SolidityvulnerabilityParser.T__27)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)




    def constructorDefinition(self):

        localctx = SolidityvulnerabilityParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_constructorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(SolidityvulnerabilityParser.T__37)
            self.state = 348
            self.parameterList()
            self.state = 349
            self.modifierList()
            self.state = 350
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)




    def modifierDefinition(self):

        localctx = SolidityvulnerabilityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(SolidityvulnerabilityParser.T__38)
            self.state = 353
            self.identifier()
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__32:
                self.state = 354
                self.parameterList()


            self.state = 357
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)




    def modifierInvocation(self):

        localctx = SolidityvulnerabilityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.identifier()
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__32:
                self.state = 360
                self.match(SolidityvulnerabilityParser.T__32)
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                    self.state = 361
                    self.expressionList()


                self.state = 364
                self.match(SolidityvulnerabilityParser.T__33)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.BlockContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.NatSpecContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = SolidityvulnerabilityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.NatSpecSingleLine or _la==SolidityvulnerabilityParser.NatSpecMultiLine:
                self.state = 367
                self.natSpec()


            self.state = 370
            self.match(SolidityvulnerabilityParser.T__39)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier:
                self.state = 371
                self.identifier()


            self.state = 374
            self.parameterList()
            self.state = 375
            self.modifierList()
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__40:
                self.state = 376
                self.returnParameters()


            self.state = 381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__13]:
                self.state = 379
                self.match(SolidityvulnerabilityParser.T__13)
                pass
            elif token in [SolidityvulnerabilityParser.T__25]:
                self.state = 380
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)




    def returnParameters(self):

        localctx = SolidityvulnerabilityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(SolidityvulnerabilityParser.T__40)
            self.state = 384
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.PublicKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.InternalKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.PrivateKeyword, i)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)




    def modifierList(self):

        localctx = SolidityvulnerabilityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (SolidityvulnerabilityParser.ConstantKeyword - 118)) | (1 << (SolidityvulnerabilityParser.ExternalKeyword - 118)) | (1 << (SolidityvulnerabilityParser.InternalKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PayableKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PrivateKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PublicKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PureKeyword - 118)) | (1 << (SolidityvulnerabilityParser.ViewKeyword - 118)) | (1 << (SolidityvulnerabilityParser.Identifier - 118)))) != 0):
                self.state = 392
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.Identifier]:
                    self.state = 386
                    self.modifierInvocation()
                    pass
                elif token in [SolidityvulnerabilityParser.ConstantKeyword, SolidityvulnerabilityParser.PayableKeyword, SolidityvulnerabilityParser.PureKeyword, SolidityvulnerabilityParser.ViewKeyword]:
                    self.state = 387
                    self.stateMutability()
                    pass
                elif token in [SolidityvulnerabilityParser.ExternalKeyword]:
                    self.state = 388
                    self.match(SolidityvulnerabilityParser.ExternalKeyword)
                    pass
                elif token in [SolidityvulnerabilityParser.PublicKeyword]:
                    self.state = 389
                    self.match(SolidityvulnerabilityParser.PublicKeyword)
                    pass
                elif token in [SolidityvulnerabilityParser.InternalKeyword]:
                    self.state = 390
                    self.match(SolidityvulnerabilityParser.InternalKeyword)
                    pass
                elif token in [SolidityvulnerabilityParser.PrivateKeyword]:
                    self.state = 391
                    self.match(SolidityvulnerabilityParser.PrivateKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.EventParameterListContext,0)


        def natSpec(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.NatSpecContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)




    def eventDefinition(self):

        localctx = SolidityvulnerabilityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.NatSpecSingleLine or _la==SolidityvulnerabilityParser.NatSpecMultiLine:
                self.state = 397
                self.natSpec()


            self.state = 400
            self.match(SolidityvulnerabilityParser.T__41)
            self.state = 401
            self.identifier()
            self.state = 402
            self.eventParameterList()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.AnonymousKeyword:
                self.state = 403
                self.match(SolidityvulnerabilityParser.AnonymousKeyword)


            self.state = 406
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = SolidityvulnerabilityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)




    def enumDefinition(self):

        localctx = SolidityvulnerabilityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(SolidityvulnerabilityParser.T__42)
            self.state = 411
            self.identifier()
            self.state = 412
            self.match(SolidityvulnerabilityParser.T__25)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier:
                self.state = 413
                self.enumValue()


            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityvulnerabilityParser.T__26:
                self.state = 416
                self.match(SolidityvulnerabilityParser.T__26)
                self.state = 417
                self.enumValue()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 423
            self.match(SolidityvulnerabilityParser.T__27)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = SolidityvulnerabilityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__46) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__59) | (1 << SolidityvulnerabilityParser.T__60) | (1 << SolidityvulnerabilityParser.T__61) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityvulnerabilityParser.Int - 104)) | (1 << (SolidityvulnerabilityParser.Uint - 104)) | (1 << (SolidityvulnerabilityParser.Byte - 104)) | (1 << (SolidityvulnerabilityParser.Fixed - 104)) | (1 << (SolidityvulnerabilityParser.Ufixed - 104)) | (1 << (SolidityvulnerabilityParser.Identifier - 104)))) != 0):
                self.state = 426
                self.parameter()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityvulnerabilityParser.T__26:
                    self.state = 427
                    self.match(SolidityvulnerabilityParser.T__26)
                    self.state = 428
                    self.parameter()
                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 436
            self.match(SolidityvulnerabilityParser.T__33)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = SolidityvulnerabilityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.typeName(0)
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 439
                self.storageLocation()


            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier:
                self.state = 442
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)




    def eventParameterList(self):

        localctx = SolidityvulnerabilityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__46) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__59) | (1 << SolidityvulnerabilityParser.T__60) | (1 << SolidityvulnerabilityParser.T__61) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityvulnerabilityParser.Int - 104)) | (1 << (SolidityvulnerabilityParser.Uint - 104)) | (1 << (SolidityvulnerabilityParser.Byte - 104)) | (1 << (SolidityvulnerabilityParser.Fixed - 104)) | (1 << (SolidityvulnerabilityParser.Ufixed - 104)) | (1 << (SolidityvulnerabilityParser.Identifier - 104)))) != 0):
                self.state = 446
                self.eventParameter()
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityvulnerabilityParser.T__26:
                    self.state = 447
                    self.match(SolidityvulnerabilityParser.T__26)
                    self.state = 448
                    self.eventParameter()
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 456
            self.match(SolidityvulnerabilityParser.T__33)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)




    def eventParameter(self):

        localctx = SolidityvulnerabilityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.typeName(0)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.IndexedKeyword:
                self.state = 459
                self.match(SolidityvulnerabilityParser.IndexedKeyword)


            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier:
                self.state = 462
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.FunctionTypeParameterContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.FunctionTypeParameterContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_functionTypeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameterList" ):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameterList" ):
                listener.exitFunctionTypeParameterList(self)




    def functionTypeParameterList(self):

        localctx = SolidityvulnerabilityParser.FunctionTypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_functionTypeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__46) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__59) | (1 << SolidityvulnerabilityParser.T__60) | (1 << SolidityvulnerabilityParser.T__61) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityvulnerabilityParser.Int - 104)) | (1 << (SolidityvulnerabilityParser.Uint - 104)) | (1 << (SolidityvulnerabilityParser.Byte - 104)) | (1 << (SolidityvulnerabilityParser.Fixed - 104)) | (1 << (SolidityvulnerabilityParser.Ufixed - 104)) | (1 << (SolidityvulnerabilityParser.Identifier - 104)))) != 0):
                self.state = 466
                self.functionTypeParameter()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityvulnerabilityParser.T__26:
                    self.state = 467
                    self.match(SolidityvulnerabilityParser.T__26)
                    self.state = 468
                    self.functionTypeParameter()
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 476
            self.match(SolidityvulnerabilityParser.T__33)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_functionTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameter" ):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameter" ):
                listener.exitFunctionTypeParameter(self)




    def functionTypeParameter(self):

        localctx = SolidityvulnerabilityParser.FunctionTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.typeName(0)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__48) | (1 << SolidityvulnerabilityParser.T__49) | (1 << SolidityvulnerabilityParser.T__50))) != 0):
                self.state = 479
                self.storageLocation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = SolidityvulnerabilityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.typeName(0)
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 483
                self.storageLocation()


            self.state = 486
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.FunctionTypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityvulnerabilityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 489
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 490
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 491
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 492
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 493
                self.match(SolidityvulnerabilityParser.T__45)
                self.state = 494
                self.match(SolidityvulnerabilityParser.PayableKeyword)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityvulnerabilityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 497
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 498
                    self.match(SolidityvulnerabilityParser.T__43)
                    self.state = 500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                        self.state = 499
                        self.expression(0)


                    self.state = 502
                    self.match(SolidityvulnerabilityParser.T__44) 
                self.state = 507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UserDefinedTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)




    def userDefinedTypeName(self):

        localctx = SolidityvulnerabilityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.identifier()
            self.state = 513
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 509
                    self.match(SolidityvulnerabilityParser.T__2)
                    self.state = 510
                    self.identifier() 
                self.state = 515
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ElementaryTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = SolidityvulnerabilityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(SolidityvulnerabilityParser.T__46)
            self.state = 517
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 518
            self.elementaryTypeName()
            self.state = 519
            self.match(SolidityvulnerabilityParser.T__47)
            self.state = 520
            self.typeName(0)
            self.state = 521
            self.match(SolidityvulnerabilityParser.T__33)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.FunctionTypeParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.FunctionTypeParameterListContext,i)


        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.InternalKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.InternalKeyword, i)

        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityvulnerabilityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityvulnerabilityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)




    def functionTypeName(self):

        localctx = SolidityvulnerabilityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(SolidityvulnerabilityParser.T__39)
            self.state = 524
            self.functionTypeParameterList()
            self.state = 530
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 528
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityvulnerabilityParser.InternalKeyword]:
                        self.state = 525
                        self.match(SolidityvulnerabilityParser.InternalKeyword)
                        pass
                    elif token in [SolidityvulnerabilityParser.ExternalKeyword]:
                        self.state = 526
                        self.match(SolidityvulnerabilityParser.ExternalKeyword)
                        pass
                    elif token in [SolidityvulnerabilityParser.ConstantKeyword, SolidityvulnerabilityParser.PayableKeyword, SolidityvulnerabilityParser.PureKeyword, SolidityvulnerabilityParser.ViewKeyword]:
                        self.state = 527
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 532
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 533
                self.match(SolidityvulnerabilityParser.T__40)
                self.state = 534
                self.functionTypeParameterList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageLocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)




    def storageLocation(self):

        localctx = SolidityvulnerabilityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__48) | (1 << SolidityvulnerabilityParser.T__49) | (1 << SolidityvulnerabilityParser.T__50))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateMutabilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = SolidityvulnerabilityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            _la = self._input.LA(1)
            if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (SolidityvulnerabilityParser.ConstantKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PayableKeyword - 118)) | (1 << (SolidityvulnerabilityParser.PureKeyword - 118)) | (1 << (SolidityvulnerabilityParser.ViewKeyword - 118)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SolidityvulnerabilityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(SolidityvulnerabilityParser.T__25)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__25 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__35 - 6)) | (1 << (SolidityvulnerabilityParser.T__39 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__46 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__51 - 6)) | (1 << (SolidityvulnerabilityParser.T__53 - 6)) | (1 << (SolidityvulnerabilityParser.T__54 - 6)) | (1 << (SolidityvulnerabilityParser.T__55 - 6)) | (1 << (SolidityvulnerabilityParser.T__56 - 6)) | (1 << (SolidityvulnerabilityParser.T__57 - 6)) | (1 << (SolidityvulnerabilityParser.T__58 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.BreakKeyword - 70)) | (1 << (SolidityvulnerabilityParser.ContinueKeyword - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                self.state = 542
                self.statement()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 548
            self.match(SolidityvulnerabilityParser.T__27)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.SimpleStatementContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SolidityvulnerabilityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_statement)
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 550
                self.ifStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                self.whileStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 552
                self.forStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__25]:
                self.enterOuterAlt(localctx, 4)
                self.state = 553
                self.block()
                pass
            elif token in [SolidityvulnerabilityParser.T__54]:
                self.enterOuterAlt(localctx, 5)
                self.state = 554
                self.inlineAssemblyStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 555
                self.doWhileStatement()
                pass
            elif token in [SolidityvulnerabilityParser.ContinueKeyword]:
                self.enterOuterAlt(localctx, 7)
                self.state = 556
                self.continueStatement()
                pass
            elif token in [SolidityvulnerabilityParser.BreakKeyword]:
                self.enterOuterAlt(localctx, 8)
                self.state = 557
                self.breakStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__56]:
                self.enterOuterAlt(localctx, 9)
                self.state = 558
                self.returnStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__57]:
                self.enterOuterAlt(localctx, 10)
                self.state = 559
                self.throwStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__58]:
                self.enterOuterAlt(localctx, 11)
                self.state = 560
                self.emitStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__5, SolidityvulnerabilityParser.T__15, SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__32, SolidityvulnerabilityParser.T__39, SolidityvulnerabilityParser.T__43, SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__46, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.T__59, SolidityvulnerabilityParser.T__60, SolidityvulnerabilityParser.T__61, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.T__63, SolidityvulnerabilityParser.T__64, SolidityvulnerabilityParser.T__65, SolidityvulnerabilityParser.T__66, SolidityvulnerabilityParser.T__67, SolidityvulnerabilityParser.T__68, SolidityvulnerabilityParser.T__69, SolidityvulnerabilityParser.Int, SolidityvulnerabilityParser.Uint, SolidityvulnerabilityParser.Byte, SolidityvulnerabilityParser.Fixed, SolidityvulnerabilityParser.Ufixed, SolidityvulnerabilityParser.BooleanLiteral, SolidityvulnerabilityParser.DecimalNumber, SolidityvulnerabilityParser.HexNumber, SolidityvulnerabilityParser.HexLiteral, SolidityvulnerabilityParser.TypeKeyword, SolidityvulnerabilityParser.Identifier, SolidityvulnerabilityParser.StringLiteral]:
                self.enterOuterAlt(localctx, 12)
                self.state = 561
                self.simpleStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SolidityvulnerabilityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.expression(0)
            self.state = 565
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SolidityvulnerabilityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(SolidityvulnerabilityParser.T__51)
            self.state = 568
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 569
            self.expression(0)
            self.state = 570
            self.match(SolidityvulnerabilityParser.T__33)
            self.state = 571
            self.statement()
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 572
                self.match(SolidityvulnerabilityParser.T__52)
                self.state = 573
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SolidityvulnerabilityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(SolidityvulnerabilityParser.T__53)
            self.state = 577
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 578
            self.expression(0)
            self.state = 579
            self.match(SolidityvulnerabilityParser.T__33)
            self.state = 580
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)




    def simpleStatement(self):

        localctx = SolidityvulnerabilityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 582
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 583
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SolidityvulnerabilityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(SolidityvulnerabilityParser.T__35)
            self.state = 587
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__5, SolidityvulnerabilityParser.T__15, SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__32, SolidityvulnerabilityParser.T__39, SolidityvulnerabilityParser.T__43, SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__46, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.T__59, SolidityvulnerabilityParser.T__60, SolidityvulnerabilityParser.T__61, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.T__63, SolidityvulnerabilityParser.T__64, SolidityvulnerabilityParser.T__65, SolidityvulnerabilityParser.T__66, SolidityvulnerabilityParser.T__67, SolidityvulnerabilityParser.T__68, SolidityvulnerabilityParser.T__69, SolidityvulnerabilityParser.Int, SolidityvulnerabilityParser.Uint, SolidityvulnerabilityParser.Byte, SolidityvulnerabilityParser.Fixed, SolidityvulnerabilityParser.Ufixed, SolidityvulnerabilityParser.BooleanLiteral, SolidityvulnerabilityParser.DecimalNumber, SolidityvulnerabilityParser.HexNumber, SolidityvulnerabilityParser.HexLiteral, SolidityvulnerabilityParser.TypeKeyword, SolidityvulnerabilityParser.Identifier, SolidityvulnerabilityParser.StringLiteral]:
                self.state = 588
                self.simpleStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__13]:
                self.state = 589
                self.match(SolidityvulnerabilityParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__5, SolidityvulnerabilityParser.T__15, SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__32, SolidityvulnerabilityParser.T__43, SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.T__59, SolidityvulnerabilityParser.T__60, SolidityvulnerabilityParser.T__61, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.T__63, SolidityvulnerabilityParser.T__64, SolidityvulnerabilityParser.T__65, SolidityvulnerabilityParser.T__66, SolidityvulnerabilityParser.T__67, SolidityvulnerabilityParser.T__68, SolidityvulnerabilityParser.T__69, SolidityvulnerabilityParser.Int, SolidityvulnerabilityParser.Uint, SolidityvulnerabilityParser.Byte, SolidityvulnerabilityParser.Fixed, SolidityvulnerabilityParser.Ufixed, SolidityvulnerabilityParser.BooleanLiteral, SolidityvulnerabilityParser.DecimalNumber, SolidityvulnerabilityParser.HexNumber, SolidityvulnerabilityParser.HexLiteral, SolidityvulnerabilityParser.TypeKeyword, SolidityvulnerabilityParser.Identifier, SolidityvulnerabilityParser.StringLiteral]:
                self.state = 592
                self.expressionStatement()
                pass
            elif token in [SolidityvulnerabilityParser.T__13]:
                self.state = 593
                self.match(SolidityvulnerabilityParser.T__13)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                self.state = 596
                self.expression(0)


            self.state = 599
            self.match(SolidityvulnerabilityParser.T__33)
            self.state = 600
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineAssemblyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyBlockContext,0)


        def StringLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.StringLiteral, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityvulnerabilityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(SolidityvulnerabilityParser.T__54)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.StringLiteral:
                self.state = 603
                self.match(SolidityvulnerabilityParser.StringLiteral)


            self.state = 606
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SolidityvulnerabilityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(SolidityvulnerabilityParser.T__55)
            self.state = 609
            self.statement()
            self.state = 610
            self.match(SolidityvulnerabilityParser.T__53)
            self.state = 611
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 612
            self.expression(0)
            self.state = 613
            self.match(SolidityvulnerabilityParser.T__33)
            self.state = 614
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SolidityvulnerabilityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(SolidityvulnerabilityParser.ContinueKeyword)
            self.state = 617
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SolidityvulnerabilityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(SolidityvulnerabilityParser.BreakKeyword)
            self.state = 620
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SolidityvulnerabilityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(SolidityvulnerabilityParser.T__56)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                self.state = 623
                self.expression(0)


            self.state = 626
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = SolidityvulnerabilityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(SolidityvulnerabilityParser.T__57)
            self.state = 629
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)




    def emitStatement(self):

        localctx = SolidityvulnerabilityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(SolidityvulnerabilityParser.T__58)
            self.state = 632
            self.functionCall()
            self.state = 633
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)




    def variableDeclarationStatement(self):

        localctx = SolidityvulnerabilityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 635
                self.match(SolidityvulnerabilityParser.T__59)
                self.state = 636
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 637
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 638
                self.match(SolidityvulnerabilityParser.T__32)
                self.state = 639
                self.variableDeclarationList()
                self.state = 640
                self.match(SolidityvulnerabilityParser.T__33)
                pass


            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__20:
                self.state = 644
                self.match(SolidityvulnerabilityParser.T__20)
                self.state = 645
                self.expression(0)


            self.state = 648
            self.match(SolidityvulnerabilityParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = SolidityvulnerabilityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__46) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__59) | (1 << SolidityvulnerabilityParser.T__60) | (1 << SolidityvulnerabilityParser.T__61) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityvulnerabilityParser.Int - 104)) | (1 << (SolidityvulnerabilityParser.Uint - 104)) | (1 << (SolidityvulnerabilityParser.Byte - 104)) | (1 << (SolidityvulnerabilityParser.Fixed - 104)) | (1 << (SolidityvulnerabilityParser.Ufixed - 104)) | (1 << (SolidityvulnerabilityParser.Identifier - 104)))) != 0):
                self.state = 650
                self.variableDeclaration()


            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityvulnerabilityParser.T__26:
                self.state = 653
                self.match(SolidityvulnerabilityParser.T__26)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__46) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__59) | (1 << SolidityvulnerabilityParser.T__60) | (1 << SolidityvulnerabilityParser.T__61) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SolidityvulnerabilityParser.Int - 104)) | (1 << (SolidityvulnerabilityParser.Uint - 104)) | (1 << (SolidityvulnerabilityParser.Byte - 104)) | (1 << (SolidityvulnerabilityParser.Fixed - 104)) | (1 << (SolidityvulnerabilityParser.Ufixed - 104)) | (1 << (SolidityvulnerabilityParser.Identifier - 104)))) != 0):
                    self.state = 654
                    self.variableDeclaration()


                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SolidityvulnerabilityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 669
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier:
                        self.state = 663
                        self.identifier()


                    self.state = 666
                    self.match(SolidityvulnerabilityParser.T__26) 
                self.state = 671
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier:
                self.state = 672
                self.identifier()


            self.state = 675
            self.match(SolidityvulnerabilityParser.T__33)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementaryTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityvulnerabilityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityvulnerabilityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityvulnerabilityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityvulnerabilityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityvulnerabilityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)




    def elementaryTypeName(self):

        localctx = SolidityvulnerabilityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            _la = self._input.LA(1)
            if not(((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (SolidityvulnerabilityParser.T__45 - 46)) | (1 << (SolidityvulnerabilityParser.T__59 - 46)) | (1 << (SolidityvulnerabilityParser.T__60 - 46)) | (1 << (SolidityvulnerabilityParser.T__61 - 46)) | (1 << (SolidityvulnerabilityParser.T__62 - 46)) | (1 << (SolidityvulnerabilityParser.Int - 46)) | (1 << (SolidityvulnerabilityParser.Uint - 46)) | (1 << (SolidityvulnerabilityParser.Byte - 46)) | (1 << (SolidityvulnerabilityParser.Fixed - 46)) | (1 << (SolidityvulnerabilityParser.Ufixed - 46)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.PrimaryExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.FunctionCallArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityvulnerabilityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 680
                self.match(SolidityvulnerabilityParser.T__65)
                self.state = 681
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 682
                self.match(SolidityvulnerabilityParser.T__32)
                self.state = 683
                self.expression(0)
                self.state = 684
                self.match(SolidityvulnerabilityParser.T__33)
                pass

            elif la_ == 3:
                self.state = 686
                _la = self._input.LA(1)
                if not(_la==SolidityvulnerabilityParser.T__63 or _la==SolidityvulnerabilityParser.T__64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 687
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 688
                _la = self._input.LA(1)
                if not(_la==SolidityvulnerabilityParser.T__5 or _la==SolidityvulnerabilityParser.T__66):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 689
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 690
                _la = self._input.LA(1)
                if not(_la==SolidityvulnerabilityParser.T__67 or _la==SolidityvulnerabilityParser.T__68):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 691
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 692
                self.match(SolidityvulnerabilityParser.T__69)
                self.state = 693
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 694
                self.match(SolidityvulnerabilityParser.T__15)
                self.state = 695
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 696
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 758
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 756
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 699
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 700
                        self.match(SolidityvulnerabilityParser.T__70)
                        self.state = 701
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 702
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 703
                        _la = self._input.LA(1)
                        if not(((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (SolidityvulnerabilityParser.T__23 - 24)) | (1 << (SolidityvulnerabilityParser.T__71 - 24)) | (1 << (SolidityvulnerabilityParser.T__72 - 24)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 704
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 705
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 706
                        _la = self._input.LA(1)
                        if not(_la==SolidityvulnerabilityParser.T__5 or _la==SolidityvulnerabilityParser.T__66):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 707
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 708
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 709
                        _la = self._input.LA(1)
                        if not(_la==SolidityvulnerabilityParser.T__73 or _la==SolidityvulnerabilityParser.T__74):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 710
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 711
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 712
                        self.match(SolidityvulnerabilityParser.T__75)
                        self.state = 713
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 714
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 715
                        self.match(SolidityvulnerabilityParser.T__14)
                        self.state = 716
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 717
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 718
                        self.match(SolidityvulnerabilityParser.T__76)
                        self.state = 719
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 720
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 721
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__16) | (1 << SolidityvulnerabilityParser.T__17) | (1 << SolidityvulnerabilityParser.T__18) | (1 << SolidityvulnerabilityParser.T__19))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 722
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 723
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 724
                        _la = self._input.LA(1)
                        if not(_la==SolidityvulnerabilityParser.T__77 or _la==SolidityvulnerabilityParser.T__78):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 725
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 726
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 727
                        self.match(SolidityvulnerabilityParser.T__79)
                        self.state = 728
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 729
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 730
                        self.match(SolidityvulnerabilityParser.T__80)
                        self.state = 731
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 732
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 733
                        self.match(SolidityvulnerabilityParser.T__81)
                        self.state = 734
                        self.expression(0)
                        self.state = 735
                        self.match(SolidityvulnerabilityParser.T__82)
                        self.state = 736
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 738
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 739
                        _la = self._input.LA(1)
                        if not(_la==SolidityvulnerabilityParser.T__20 or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (SolidityvulnerabilityParser.T__83 - 84)) | (1 << (SolidityvulnerabilityParser.T__84 - 84)) | (1 << (SolidityvulnerabilityParser.T__85 - 84)) | (1 << (SolidityvulnerabilityParser.T__86 - 84)) | (1 << (SolidityvulnerabilityParser.T__87 - 84)) | (1 << (SolidityvulnerabilityParser.T__88 - 84)) | (1 << (SolidityvulnerabilityParser.T__89 - 84)) | (1 << (SolidityvulnerabilityParser.T__90 - 84)) | (1 << (SolidityvulnerabilityParser.T__91 - 84)) | (1 << (SolidityvulnerabilityParser.T__92 - 84)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 740
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 741
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 742
                        _la = self._input.LA(1)
                        if not(_la==SolidityvulnerabilityParser.T__63 or _la==SolidityvulnerabilityParser.T__64):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 743
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 744
                        self.match(SolidityvulnerabilityParser.T__43)
                        self.state = 745
                        self.expression(0)
                        self.state = 746
                        self.match(SolidityvulnerabilityParser.T__44)
                        pass

                    elif la_ == 16:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 748
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 749
                        self.match(SolidityvulnerabilityParser.T__32)
                        self.state = 750
                        self.functionCallArguments()
                        self.state = 751
                        self.match(SolidityvulnerabilityParser.T__33)
                        pass

                    elif la_ == 17:
                        localctx = SolidityvulnerabilityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 753
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 754
                        self.match(SolidityvulnerabilityParser.T__2)
                        self.state = 755
                        self.identifier()
                        pass

             
                self.state = 760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.NumberLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.HexLiteral, 0)

        def StringLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.StringLiteral, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = SolidityvulnerabilityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_primaryExpression)
        try:
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 761
                self.match(SolidityvulnerabilityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 762
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 763
                self.match(SolidityvulnerabilityParser.HexLiteral)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 764
                self.match(SolidityvulnerabilityParser.StringLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 765
                self.identifier()
                self.state = 768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 766
                    self.match(SolidityvulnerabilityParser.T__43)
                    self.state = 767
                    self.match(SolidityvulnerabilityParser.T__44)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 770
                self.match(SolidityvulnerabilityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 771
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 772
                self.typeNameExpression()
                self.state = 775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 773
                    self.match(SolidityvulnerabilityParser.T__43)
                    self.state = 774
                    self.match(SolidityvulnerabilityParser.T__44)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SolidityvulnerabilityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.expression(0)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityvulnerabilityParser.T__26:
                self.state = 780
                self.match(SolidityvulnerabilityParser.T__26)
                self.state = 781
                self.expression(0)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)




    def nameValueList(self):

        localctx = SolidityvulnerabilityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.nameValue()
            self.state = 792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 788
                    self.match(SolidityvulnerabilityParser.T__26)
                    self.state = 789
                    self.nameValue() 
                self.state = 794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__26:
                self.state = 795
                self.match(SolidityvulnerabilityParser.T__26)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)




    def nameValue(self):

        localctx = SolidityvulnerabilityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.identifier()
            self.state = 799
            self.match(SolidityvulnerabilityParser.T__82)
            self.state = 800
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)




    def functionCallArguments(self):

        localctx = SolidityvulnerabilityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 810
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.match(SolidityvulnerabilityParser.T__25)
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier:
                    self.state = 803
                    self.nameValueList()


                self.state = 806
                self.match(SolidityvulnerabilityParser.T__27)
                pass
            elif token in [SolidityvulnerabilityParser.T__5, SolidityvulnerabilityParser.T__15, SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__32, SolidityvulnerabilityParser.T__33, SolidityvulnerabilityParser.T__43, SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.T__59, SolidityvulnerabilityParser.T__60, SolidityvulnerabilityParser.T__61, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.T__63, SolidityvulnerabilityParser.T__64, SolidityvulnerabilityParser.T__65, SolidityvulnerabilityParser.T__66, SolidityvulnerabilityParser.T__67, SolidityvulnerabilityParser.T__68, SolidityvulnerabilityParser.T__69, SolidityvulnerabilityParser.Int, SolidityvulnerabilityParser.Uint, SolidityvulnerabilityParser.Byte, SolidityvulnerabilityParser.Fixed, SolidityvulnerabilityParser.Ufixed, SolidityvulnerabilityParser.BooleanLiteral, SolidityvulnerabilityParser.DecimalNumber, SolidityvulnerabilityParser.HexNumber, SolidityvulnerabilityParser.HexLiteral, SolidityvulnerabilityParser.TypeKeyword, SolidityvulnerabilityParser.Identifier, SolidityvulnerabilityParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                    self.state = 807
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = SolidityvulnerabilityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.expression(0)
            self.state = 813
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 814
            self.functionCallArguments()
            self.state = 815
            self.match(SolidityvulnerabilityParser.T__33)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)




    def assemblyBlock(self):

        localctx = SolidityvulnerabilityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(SolidityvulnerabilityParser.T__25)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__25) | (1 << SolidityvulnerabilityParser.T__32) | (1 << SolidityvulnerabilityParser.T__35) | (1 << SolidityvulnerabilityParser.T__39) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__51) | (1 << SolidityvulnerabilityParser.T__54) | (1 << SolidityvulnerabilityParser.T__56) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (SolidityvulnerabilityParser.T__93 - 94)) | (1 << (SolidityvulnerabilityParser.T__95 - 94)) | (1 << (SolidityvulnerabilityParser.T__96 - 94)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 94)) | (1 << (SolidityvulnerabilityParser.HexNumber - 94)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 94)) | (1 << (SolidityvulnerabilityParser.BreakKeyword - 94)) | (1 << (SolidityvulnerabilityParser.ContinueKeyword - 94)) | (1 << (SolidityvulnerabilityParser.Identifier - 94)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 94)))) != 0):
                self.state = 818
                self.assemblyItem()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 824
            self.match(SolidityvulnerabilityParser.T__27)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityvulnerabilityParser.ContinueKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.StringLiteral, 0)

        def HexLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.HexLiteral, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)




    def assemblyItem(self):

        localctx = SolidityvulnerabilityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_assemblyItem)
        try:
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 829
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 830
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 831
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 832
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 833
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 834
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 835
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 836
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 837
                self.match(SolidityvulnerabilityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 838
                self.match(SolidityvulnerabilityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 839
                self.subAssembly()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 840
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 841
                self.match(SolidityvulnerabilityParser.StringLiteral)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 842
                self.match(SolidityvulnerabilityParser.HexLiteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)




    def assemblyExpression(self):

        localctx = SolidityvulnerabilityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_assemblyExpression)
        try:
            self.state = 847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.T__56, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.assemblyCall()
                pass
            elif token in [SolidityvulnerabilityParser.DecimalNumber, SolidityvulnerabilityParser.HexNumber, SolidityvulnerabilityParser.HexLiteral, SolidityvulnerabilityParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)




    def assemblyCall(self):

        localctx = SolidityvulnerabilityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__56]:
                self.state = 849
                self.match(SolidityvulnerabilityParser.T__56)
                pass
            elif token in [SolidityvulnerabilityParser.T__45]:
                self.state = 850
                self.match(SolidityvulnerabilityParser.T__45)
                pass
            elif token in [SolidityvulnerabilityParser.T__62]:
                self.state = 851
                self.match(SolidityvulnerabilityParser.T__62)
                pass
            elif token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.Identifier]:
                self.state = 852
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 855
                self.match(SolidityvulnerabilityParser.T__32)
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityvulnerabilityParser.T__24) | (1 << SolidityvulnerabilityParser.T__45) | (1 << SolidityvulnerabilityParser.T__50) | (1 << SolidityvulnerabilityParser.T__56) | (1 << SolidityvulnerabilityParser.T__62))) != 0) or ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (SolidityvulnerabilityParser.DecimalNumber - 111)) | (1 << (SolidityvulnerabilityParser.HexNumber - 111)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 111)) | (1 << (SolidityvulnerabilityParser.Identifier - 111)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 111)))) != 0):
                    self.state = 856
                    self.assemblyExpression()


                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityvulnerabilityParser.T__26:
                    self.state = 859
                    self.match(SolidityvulnerabilityParser.T__26)
                    self.state = 860
                    self.assemblyExpression()
                    self.state = 865
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 866
                self.match(SolidityvulnerabilityParser.T__33)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLocalDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityvulnerabilityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(SolidityvulnerabilityParser.T__93)
            self.state = 870
            self.assemblyIdentifierOrList()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__94:
                self.state = 871
                self.match(SolidityvulnerabilityParser.T__94)
                self.state = 872
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyIdentifierOrListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)




    def assemblyAssignment(self):

        localctx = SolidityvulnerabilityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.assemblyIdentifierOrList()
            self.state = 876
            self.match(SolidityvulnerabilityParser.T__94)
            self.state = 877
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierOrListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierOrList" ):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierOrList" ):
                listener.exitAssemblyIdentifierOrList(self)




    def assemblyIdentifierOrList(self):

        localctx = SolidityvulnerabilityParser.AssemblyIdentifierOrListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 884
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.identifier()
                pass
            elif token in [SolidityvulnerabilityParser.T__32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self.match(SolidityvulnerabilityParser.T__32)
                self.state = 881
                self.assemblyIdentifierList()
                self.state = 882
                self.match(SolidityvulnerabilityParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)




    def assemblyIdentifierList(self):

        localctx = SolidityvulnerabilityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.identifier()
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityvulnerabilityParser.T__26:
                self.state = 887
                self.match(SolidityvulnerabilityParser.T__26)
                self.state = 888
                self.identifier()
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyStackAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)




    def assemblyStackAssignment(self):

        localctx = SolidityvulnerabilityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(SolidityvulnerabilityParser.T__95)
            self.state = 895
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)




    def labelDefinition(self):

        localctx = SolidityvulnerabilityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.identifier()
            self.state = 898
            self.match(SolidityvulnerabilityParser.T__82)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblySwitchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)




    def assemblySwitch(self):

        localctx = SolidityvulnerabilityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(SolidityvulnerabilityParser.T__96)
            self.state = 901
            self.assemblyExpression()
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityvulnerabilityParser.T__97 or _la==SolidityvulnerabilityParser.T__98:
                self.state = 902
                self.assemblyCase()
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)




    def assemblyCase(self):

        localctx = SolidityvulnerabilityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyCase)
        try:
            self.state = 914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 908
                self.match(SolidityvulnerabilityParser.T__97)
                self.state = 909
                self.assemblyLiteral()
                self.state = 910
                self.assemblyBlock()
                pass
            elif token in [SolidityvulnerabilityParser.T__98]:
                self.enterOuterAlt(localctx, 2)
                self.state = 912
                self.match(SolidityvulnerabilityParser.T__98)
                self.state = 913
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyBlockContext,0)


        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyIdentifierListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityvulnerabilityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.match(SolidityvulnerabilityParser.T__39)
            self.state = 917
            self.identifier()
            self.state = 918
            self.match(SolidityvulnerabilityParser.T__32)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier:
                self.state = 919
                self.assemblyIdentifierList()


            self.state = 922
            self.match(SolidityvulnerabilityParser.T__33)
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityvulnerabilityParser.T__99:
                self.state = 923
                self.assemblyFunctionReturns()


            self.state = 926
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionReturnsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyIdentifierListContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityvulnerabilityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(SolidityvulnerabilityParser.T__99)
            self.state = 929
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyForContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyExpressionContext,i)


        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyBlockContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)




    def assemblyFor(self):

        localctx = SolidityvulnerabilityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(SolidityvulnerabilityParser.T__35)
            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__25]:
                self.state = 932
                self.assemblyBlock()
                pass
            elif token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.T__56, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.DecimalNumber, SolidityvulnerabilityParser.HexNumber, SolidityvulnerabilityParser.HexLiteral, SolidityvulnerabilityParser.Identifier, SolidityvulnerabilityParser.StringLiteral]:
                self.state = 933
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 936
            self.assemblyExpression()
            self.state = 939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__25]:
                self.state = 937
                self.assemblyBlock()
                pass
            elif token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.T__56, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.DecimalNumber, SolidityvulnerabilityParser.HexNumber, SolidityvulnerabilityParser.HexLiteral, SolidityvulnerabilityParser.Identifier, SolidityvulnerabilityParser.StringLiteral]:
                self.state = 938
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 941
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)




    def assemblyIf(self):

        localctx = SolidityvulnerabilityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(SolidityvulnerabilityParser.T__51)
            self.state = 944
            self.assemblyExpression()
            self.state = 945
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.StringLiteral, 0)

        def DecimalNumber(self):
            return self.getToken(SolidityvulnerabilityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityvulnerabilityParser.HexNumber, 0)

        def HexLiteral(self):
            return self.getToken(SolidityvulnerabilityParser.HexLiteral, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)




    def assemblyLiteral(self):

        localctx = SolidityvulnerabilityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            _la = self._input.LA(1)
            if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (SolidityvulnerabilityParser.DecimalNumber - 111)) | (1 << (SolidityvulnerabilityParser.HexNumber - 111)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 111)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 111)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubAssemblyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)




    def subAssembly(self):

        localctx = SolidityvulnerabilityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(SolidityvulnerabilityParser.T__54)
            self.state = 950
            self.identifier()
            self.state = 951
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityvulnerabilityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityvulnerabilityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)




    def tupleExpression(self):

        localctx = SolidityvulnerabilityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__32]:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.match(SolidityvulnerabilityParser.T__32)

                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                    self.state = 954
                    self.expression(0)


                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityvulnerabilityParser.T__26:
                    self.state = 957
                    self.match(SolidityvulnerabilityParser.T__26)
                    self.state = 959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                        self.state = 958
                        self.expression(0)


                    self.state = 965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 966
                self.match(SolidityvulnerabilityParser.T__33)
                pass
            elif token in [SolidityvulnerabilityParser.T__43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 967
                self.match(SolidityvulnerabilityParser.T__43)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 6)) & ~0x3f) == 0 and ((1 << (_la - 6)) & ((1 << (SolidityvulnerabilityParser.T__5 - 6)) | (1 << (SolidityvulnerabilityParser.T__15 - 6)) | (1 << (SolidityvulnerabilityParser.T__24 - 6)) | (1 << (SolidityvulnerabilityParser.T__32 - 6)) | (1 << (SolidityvulnerabilityParser.T__43 - 6)) | (1 << (SolidityvulnerabilityParser.T__45 - 6)) | (1 << (SolidityvulnerabilityParser.T__50 - 6)) | (1 << (SolidityvulnerabilityParser.T__59 - 6)) | (1 << (SolidityvulnerabilityParser.T__60 - 6)) | (1 << (SolidityvulnerabilityParser.T__61 - 6)) | (1 << (SolidityvulnerabilityParser.T__62 - 6)) | (1 << (SolidityvulnerabilityParser.T__63 - 6)) | (1 << (SolidityvulnerabilityParser.T__64 - 6)) | (1 << (SolidityvulnerabilityParser.T__65 - 6)) | (1 << (SolidityvulnerabilityParser.T__66 - 6)) | (1 << (SolidityvulnerabilityParser.T__67 - 6)) | (1 << (SolidityvulnerabilityParser.T__68 - 6)))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (SolidityvulnerabilityParser.T__69 - 70)) | (1 << (SolidityvulnerabilityParser.Int - 70)) | (1 << (SolidityvulnerabilityParser.Uint - 70)) | (1 << (SolidityvulnerabilityParser.Byte - 70)) | (1 << (SolidityvulnerabilityParser.Fixed - 70)) | (1 << (SolidityvulnerabilityParser.Ufixed - 70)) | (1 << (SolidityvulnerabilityParser.BooleanLiteral - 70)) | (1 << (SolidityvulnerabilityParser.DecimalNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexNumber - 70)) | (1 << (SolidityvulnerabilityParser.HexLiteral - 70)) | (1 << (SolidityvulnerabilityParser.TypeKeyword - 70)) | (1 << (SolidityvulnerabilityParser.Identifier - 70)) | (1 << (SolidityvulnerabilityParser.StringLiteral - 70)))) != 0):
                    self.state = 968
                    self.expression(0)
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SolidityvulnerabilityParser.T__26:
                        self.state = 969
                        self.match(SolidityvulnerabilityParser.T__26)
                        self.state = 970
                        self.expression(0)
                        self.state = 975
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 978
                self.match(SolidityvulnerabilityParser.T__44)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityvulnerabilityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)




    def typeNameExpression(self):

        localctx = SolidityvulnerabilityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_typeNameExpression)
        try:
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityvulnerabilityParser.T__45, SolidityvulnerabilityParser.T__59, SolidityvulnerabilityParser.T__60, SolidityvulnerabilityParser.T__61, SolidityvulnerabilityParser.T__62, SolidityvulnerabilityParser.Int, SolidityvulnerabilityParser.Uint, SolidityvulnerabilityParser.Byte, SolidityvulnerabilityParser.Fixed, SolidityvulnerabilityParser.Ufixed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.elementaryTypeName()
                pass
            elif token in [SolidityvulnerabilityParser.T__24, SolidityvulnerabilityParser.T__50, SolidityvulnerabilityParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.userDefinedTypeName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityvulnerabilityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityvulnerabilityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityvulnerabilityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = SolidityvulnerabilityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            _la = self._input.LA(1)
            if not(_la==SolidityvulnerabilityParser.DecimalNumber or _la==SolidityvulnerabilityParser.HexNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 986
                self.match(SolidityvulnerabilityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SolidityvulnerabilityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityvulnerabilityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SolidityvulnerabilityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            _la = self._input.LA(1)
            if not(_la==SolidityvulnerabilityParser.T__24 or _la==SolidityvulnerabilityParser.T__50 or _la==SolidityvulnerabilityParser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.typeName_sempred
        self._predicates[58] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         




